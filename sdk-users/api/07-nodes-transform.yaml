# Kailash SDK API Reference - Transform Nodes
# Module: kailash.nodes.transform
# Version: 0.1.4
# Last Updated: 2025-01-06

nodes:
  # Transform Nodes
  data_transformer:
    class: kailash.nodes.transform.DataTransformerNode
    description: "Transform data using operations"
    import: "from kailash.nodes.transform import DataTransformerNode"
    config:
      operations: "List[dict] - List of transformation operations"
    inputs:
      data: "Any - Data to transform"
    outputs:
      transformed: "Any - Transformed data"
    operations:
      - filter: "Filter data based on conditions"
      - map: "Map/transform each item"
      - reduce: "Aggregate data"
      - sort: "Sort data"
      - group: "Group data by key"
    example: |
      node = DataTransformerNode()
      config = {
          'operations': [
              {'type': 'filter', 'condition': 'age > 18'},
              {'type': 'map', 'expression': 'name.upper()'},
              {'type': 'sort', 'key': 'age', 'reverse': True}
          ]
      }

  HierarchicalChunkerNode:
    class: kailash.nodes.transform.chunkers.HierarchicalChunkerNode
    description: "Split documents into hierarchical chunks"
    import: "from kailash.nodes.transform.chunkers import HierarchicalChunkerNode"
    config:
      chunk_size: "int - Maximum chunk size (default: 1000)"
      chunk_overlap: "int - Overlap between chunks (default: 200)"
      level_separators: "List[str] - Separators for hierarchy levels"
    inputs:
      documents: "List[dict] - Documents to chunk"
    outputs:
      chunks: "List[dict] - Document chunks with metadata"
    example: |
      workflow.add_node('chunker', HierarchicalChunkerNode(),
          chunk_size=1000,
          chunk_overlap=200
      )

  ChunkTextExtractorNode:
    class: kailash.nodes.transform.formatters.ChunkTextExtractorNode
    description: "Extract text from chunks for embedding"
    import: "from kailash.nodes.transform.formatters import ChunkTextExtractorNode"
    inputs:
      chunks: "List[dict] - Document chunks"
    outputs:
      input_texts: "List[str] - Extracted text for embedding"
    example: |
      workflow.add_node('text_extractor', ChunkTextExtractorNode())

  QueryTextWrapperNode:
    class: kailash.nodes.transform.formatters.QueryTextWrapperNode
    description: "Wrap query text for embedding"
    import: "from kailash.nodes.transform.formatters import QueryTextWrapperNode"
    inputs:
      query: "str - Query text"
    outputs:
      input_texts: "List[str] - Wrapped query for embedding"
    example: |
      workflow.add_node('query_wrapper', QueryTextWrapperNode())

  ContextFormatterNode:
    class: kailash.nodes.transform.formatters.ContextFormatterNode
    description: "Format context for LLM input"
    import: "from kailash.nodes.transform.formatters import ContextFormatterNode"
    inputs:
      relevant_chunks: "List[dict] - Relevant chunks"
      query: "str - Original query"
    outputs:
      messages: "List[dict] - Formatted messages for LLM"
    example: |
      workflow.add_node('formatter', ContextFormatterNode())
