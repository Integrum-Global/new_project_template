# Kailash SDK API Reference - Core Workflow
# Module: kailash.workflow
# Version: 0.1.4
# Last Updated: 2025-01-06

workflow:
  class: kailash.Workflow
  description: "Core workflow management class"
  import: "from kailash import Workflow"
  methods:
    add_node:
      signature: "add_node(node_id: str, node_or_type: Any, **config) -> None"
      description: "Add a node to the workflow"
      params:
        node_id: "Unique identifier for the node"
        node_or_type: "Node instance, Node class, or node type name"
        config: "Configuration as keyword arguments"
      example: |
        workflow.add_node('reader', CSVReaderNode(), file_path='data.csv')

    connect:
      signature: "connect(source_node: str, target_node: str, mapping: Optional[Dict[str, str]] = None, source_port: str = 'output', target_port: str = 'input', cycle: bool = False, cycle_id: Optional[str] = None, max_iterations: Optional[int] = None, convergence_check: Optional[str] = None, convergence_callback: Optional[Callable] = None, timeout: Optional[float] = None) -> None"
      description: "Connect two nodes in the workflow, optionally creating a marked cycle"
      params:
        source_node: "Source node ID"
        target_node: "Target node ID"
        mapping: "Dictionary mapping source outputs to target inputs"
        source_port: "Source port name (default: 'output')"
        target_port: "Target port name (default: 'input')"
        cycle: "Mark this connection as creating a cycle (default: False)"
        cycle_id: "Unique identifier for the cycle (optional)"
        max_iterations: "Maximum iterations for cycles (optional)"
        convergence_check: "Expression to check for convergence (optional)"
        convergence_callback: "Function to check convergence (optional)"
        timeout: "Maximum execution time in seconds (optional)"
      example: |
        # Basic connection
        workflow.connect('reader', 'processor', mapping={'data': 'data'})
        workflow.connect('processor', 'writer')
        
        # Cyclic connection with convergence
        workflow.connect('validator', 'processor',
            cycle=True,
            max_iterations=10,
            convergence_check="quality >= 0.9"
        )

    execute:
      signature: "execute(inputs: Optional[Dict[str, Any]] = None, task_manager: Optional[TaskManager] = None) -> Dict[str, Any]"
      description: "Execute the workflow directly"
      params:
        inputs: "Initial inputs to the workflow"
        task_manager: "Optional task manager for tracking"
      example: |
        # Direct execution
        results = workflow.execute(inputs={'input_data': [1, 2, 3]})

        # Or through runtime
        runtime = LocalRuntime()
        results, run_id = runtime.execute(workflow, inputs={'input_data': [1, 2, 3]})

    validate:
      signature: "validate() -> bool"
      description: "Validate workflow structure and connections"
      example: |
        workflow.validate()  # Raises exception if invalid

    to_dict:
      signature: "to_dict() -> dict"
      description: "Export workflow as dictionary"
      example: |
        workflow_dict = workflow.to_dict()

    from_dict:
      signature: "from_dict(data: dict) -> Workflow"
      description: "Create workflow from dictionary"
      example: |
        workflow = Workflow.from_dict(workflow_dict)

workflow_builder:
  class: kailash.WorkflowBuilder
  description: "Fluent API for building workflows (NOTE: Prefer using Workflow.connect() instead)"
  import: "from kailash import WorkflowBuilder"
  deprecated: "Use Workflow class with connect() method for clarity"
  methods:
    create:
      signature: "create(name: str, description: str = '') -> WorkflowBuilder"
      description: "Start building a new workflow"
      example: |
        builder = WorkflowBuilder().create('my_pipeline', 'Data processing pipeline')

    add_node:
      signature: "add_node(node_id: str, node_class: Type[Node], config: dict = None) -> WorkflowBuilder"
      description: "Add a node to the workflow"
      example: |
        builder.add_node('reader', CSVReaderNode, {'file_path': 'data.csv'})

    connect:
      signature: "connect(from_node: str, to_node: str, **kwargs) -> WorkflowBuilder"
      description: "Connect nodes in the workflow"
      example: |
        builder.connect('reader', 'processor')

    build:
      signature: "build() -> Workflow"
      description: "Build and return the workflow"
      example: |
        workflow = builder.build()