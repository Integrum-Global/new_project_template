name: Template Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  # Determine what level of testing to run based on context
  determine-context:
    name: Determine Test Context
    runs-on: ubuntu-latest
    outputs:
      test-level: ${{ steps.determine.outputs.level }}
      skip-reason: ${{ steps.determine.outputs.skip-reason }}
    steps:
      - name: Determine test level
        id: determine
        uses: actions/github-script@v7
        with:
          script: |
            const eventName = context.eventName;
            const isPR = eventName === 'pull_request';
            const isPush = eventName === 'push';
            const isManual = eventName === 'workflow_dispatch';

            console.log(`Event: ${eventName}`);
            console.log(`Ref: ${context.ref}`);

            // Check if this is a template sync PR
            if (isPR) {
              const prUser = context.payload.pull_request.user.login;
              const prTitle = context.payload.pull_request.title || '';
              const prBody = context.payload.pull_request.body || '';
              const prBranch = context.payload.pull_request.head.ref || '';

              console.log(`PR User: ${prUser}`);
              console.log(`PR Title: ${prTitle}`);
              console.log(`PR Branch: ${prBranch}`);

              // Check various indicators of template sync
              const isTemplateSync =
                prTitle.includes('Sync template updates') ||
                prTitle.includes('template sync') ||
                prTitle.includes('Template sync') ||
                prBranch.startsWith('template-sync-') ||
                prBody.includes('Automated template sync from') ||
                prBody.includes('Automated sync at') ||
                prBody.includes('This PR automatically syncs updates from the template repository') ||
                prBody.includes('This updates sdk-users/, CLAUDE.md, GitHub workflows') ||
                prBody.includes('## Template Sync') ||
                prBody.includes('Full CI pipeline is skipped for template sync PRs');

              if (isTemplateSync) {
                core.setOutput('level', 'skip');
                core.setOutput('skip-reason', 'Template sync PR - validation handled by template-sync-check.yml');
                console.log('Template sync PR detected - skipping full CI');
                return;
              }

              // Check for CLAUDE.md fix PRs
              const isClaudeFix =
                prTitle.toLowerCase().includes('claude.md') ||
                prBranch.includes('claude-md') ||
                prBody.includes('Fix CLAUDE.md Path References');

              if (isClaudeFix) {
                core.setOutput('level', 'skip');
                core.setOutput('skip-reason', 'CLAUDE.md documentation fix - no CI needed');
                console.log('CLAUDE.md fix PR detected - skipping full CI');
                return;
              }
            }

            // Manual dispatch always runs full tests
            if (isManual) {
              core.setOutput('level', 'full');
              core.setOutput('skip-reason', '');
              return;
            }

            // For PRs, always run full tests
            if (isPR) {
              core.setOutput('level', 'full');
              core.setOutput('skip-reason', '');
              console.log('PR event detected - running full test suite');
              return;
            }

            // For pushes, check if a PR exists
            if (isPush) {
              const branch = context.ref.replace('refs/heads/', '');
              console.log(`Checking for PRs on branch: ${branch}`);

              try {
                const { data: prs } = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: `${context.repo.owner}:${branch}`,
                  state: 'open'
                });

                if (prs.length > 0) {
                  core.setOutput('level', 'skip');
                  core.setOutput('skip-reason', `PR #${prs[0].number} exists for this branch - tests will run on PR`);
                  console.log(`Found ${prs.length} open PR(s) for this branch`);
                } else {
                  core.setOutput('level', 'basic');
                  core.setOutput('skip-reason', '');
                  console.log('No PR found - running basic tests');
                }
              } catch (error) {
                // If we can't check PRs, run basic tests to be safe
                console.log(`Error checking PRs: ${error.message}`);
                core.setOutput('level', 'basic');
                core.setOutput('skip-reason', '');
              }
            }

      - name: Display decision
        run: |
          echo "Test Level: ${{ steps.determine.outputs.level }}"
          echo "Skip Reason: ${{ steps.determine.outputs.skip-reason }}"

  # Skip notification job
  notify-skip:
    name: Notify Skip
    needs: determine-context
    if: needs.determine-context.outputs.test-level == 'skip'
    runs-on: ubuntu-latest
    steps:
      - name: Notify why tests are skipped
        run: |
          echo "⏭️ Skipping tests: ${{ needs.determine-context.outputs.skip-reason }}"
          echo "Tests will run when the PR is updated."

  # Basic tests for feature branch pushes without PRs
  basic-tests:
    name: Basic Tests
    needs: determine-context
    if: needs.determine-context.outputs.test-level == 'basic'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv venv
          # Check if dist/ exists and contains wheel files
          if [ -d "dist" ] && ls dist/*.whl 1> /dev/null 2>&1; then
            echo "Found wheel files in dist/ directory"
            # uv will use find-links from pyproject.toml automatically
          fi
          uv sync

      - name: Run template validation tests
        run: |
          echo "Running template structure validation..."
          # Validate template structure
          if [ -f "scripts/tests/test_template_setup.py" ]; then
            uv run pytest scripts/tests/test_template_setup.py -v
          else
            echo "Template validation tests not found - skipping"
          fi
          
          # Validate app template structure
          if [ -d "apps/_template" ]; then
            echo "✅ App template structure exists"
          else
            echo "❌ App template structure missing"
            exit 1
          fi
          
          # Validate that kailash-sdk can be imported (from PyPI)
          echo "Validating kailash-sdk installation..."
          uv run python -c "import kailash; print(f'Kailash SDK version: {kailash.__version__}')"

  # Full test suite for PRs and manual triggers
  lint-and-format:
    name: Lint and Format Check
    needs: determine-context
    if: needs.determine-context.outputs.test-level == 'full'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv venv
          # Check if dist/ exists and contains wheel files
          if [ -d "dist" ] && ls dist/*.whl 1> /dev/null 2>&1; then
            echo "Found wheel files in dist/ directory"
            # uv will use find-links from pyproject.toml automatically
          fi
          uv sync

      - name: Check formatting with black
        run: |
          # Only check directories that exist
          DIRS_TO_CHECK=""
          [ -d "apps" ] && DIRS_TO_CHECK="$DIRS_TO_CHECK apps/"
          [ -d "solutions" ] && DIRS_TO_CHECK="$DIRS_TO_CHECK solutions/"
          [ -d "scripts/tests" ] && DIRS_TO_CHECK="$DIRS_TO_CHECK scripts/tests/"
          
          if [ -n "$DIRS_TO_CHECK" ]; then
            uv run black --check $DIRS_TO_CHECK
          else
            echo "No Python code directories found to check"
          fi

      - name: Check import sorting with isort
        run: |
          # Only check directories that exist
          DIRS_TO_CHECK=""
          [ -d "apps" ] && DIRS_TO_CHECK="$DIRS_TO_CHECK apps/"
          [ -d "solutions" ] && DIRS_TO_CHECK="$DIRS_TO_CHECK solutions/"
          [ -d "scripts/tests" ] && DIRS_TO_CHECK="$DIRS_TO_CHECK scripts/tests/"
          
          if [ -n "$DIRS_TO_CHECK" ]; then
            uv run isort --check-only $DIRS_TO_CHECK
          else
            echo "No Python code directories found to check"
          fi

      - name: Lint with ruff
        run: |
          # Only check directories that exist
          DIRS_TO_CHECK=""
          [ -d "apps" ] && DIRS_TO_CHECK="$DIRS_TO_CHECK apps/"
          [ -d "solutions" ] && DIRS_TO_CHECK="$DIRS_TO_CHECK solutions/"
          [ -d "scripts/tests" ] && DIRS_TO_CHECK="$DIRS_TO_CHECK scripts/tests/"
          
          if [ -n "$DIRS_TO_CHECK" ]; then
            # Check for critical errors only (syntax errors, undefined names, etc.)
            uv run ruff check $DIRS_TO_CHECK --select=E9,F63,F7,F82
            echo "✅ No critical linting errors found"
          else
            echo "No Python code directories found to check"
          fi

  test-matrix:
    name: Test Python ${{ matrix.python-version }}
    needs: determine-context
    if: needs.determine-context.outputs.test-level == 'full'
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv venv
          # Check if dist/ exists and contains wheel files
          if [ -d "dist" ] && ls dist/*.whl 1> /dev/null 2>&1; then
            echo "Found wheel files in dist/ directory"
            # uv will use find-links from pyproject.toml automatically
          fi
          uv sync

      - name: Run template tests
        run: |
          # Run tests that exist
          if [ -d "scripts/tests" ]; then
            echo "Running template validation tests..."
            uv run pytest scripts/tests/ -v
          elif [ -d "tests" ]; then
            echo "Running client project tests..."
            uv run pytest tests/ -v --cov=apps --cov=solutions 2>/dev/null || uv run pytest tests/ -v
          else
            echo "No test directory found - creating basic validation test"
            mkdir -p tests
            cat > tests/test_basic_validation.py << 'EOF'
import os
import sys
from pathlib import Path

def test_template_structure():
    """Test that basic template structure exists."""
    root = Path(".")
    
    # Check for essential directories
    assert (root / "apps").exists(), "apps/ directory should exist"
    assert (root / "apps" / "_template").exists(), "apps/_template/ should exist"
    assert (root / "solutions").exists(), "solutions/ directory should exist"
    
    # Check for essential files
    assert (root / "CLAUDE.md").exists(), "CLAUDE.md should exist"
    assert (root / "README.md").exists(), "README.md should exist"
    assert (root / "pyproject.toml").exists(), "pyproject.toml should exist"
    
    print("✅ Template structure validation passed")

def test_kailash_sdk_importable():
    """Test that kailash SDK can be imported."""
    try:
        import kailash
        print(f"✅ Kailash SDK imported successfully: {kailash.__version__}")
    except ImportError as e:
        print(f"❌ Failed to import kailash SDK: {e}")
        raise
EOF
            uv run pytest tests/test_basic_validation.py -v
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: matrix.python-version == '3.11'
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security-scan:
    name: Security Scan
    needs: determine-context
    if: needs.determine-context.outputs.test-level == 'full'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'


  # Summary job for PR status
  pr-summary:
    name: PR Summary
    needs: [lint-and-format, test-matrix, security-scan]
    if: always() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = [
              { name: 'Lint and Format', status: '${{ needs.lint-and-format.result }}' },
              { name: 'Tests', status: '${{ needs.test-matrix.result }}' },
              { name: 'Security', status: '${{ needs.security-scan.result }}' }
            ];

            let comment = '## 🤖 CI Pipeline Results\n\n';
            let allPassed = true;

            for (const job of jobs) {
              const icon = job.status === 'success' ? '✅' : '❌';
              comment += `${icon} **${job.name}**: ${job.status}\n`;
              if (job.status !== 'success') allPassed = false;
            }

            comment += '\n';
            comment += allPassed
              ? '✨ All checks passed! Ready for review.'
              : '⚠️ Some checks failed. Please review the logs.';

            // Comment on PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(c =>
              c.user.type === 'Bot' && c.body.includes('CI Pipeline Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
