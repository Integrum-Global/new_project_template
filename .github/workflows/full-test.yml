name: Full Test Suite

on:
  push:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  full-test:
    runs-on: ubuntu-latest
    # Skip if this is a template sync commit
    if: |
      !contains(github.event.head_commit.message, 'Sync template updates from') &&
      !contains(github.event.head_commit.message, 'template-sync-')
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio pytest-timeout
        pip install black isort ruff
        # Install the package with all dependencies
        pip install -e ".[dev]" || pip install -e .

    - name: Lint with ruff
      run: |
        if [ -d "src" ] || [ -d "tests" ]; then
          ruff check src/ tests/ 2>/dev/null || echo "Ruff check completed"
        else
          echo "No src/ or tests/ directories to check"
        fi
      continue-on-error: true

    - name: Format check with black
      run: |
        if [ -d "src" ] || [ -d "tests" ]; then
          black --check src/ tests/ 2>/dev/null || echo "Black check completed"
        else
          echo "No src/ or tests/ directories to check"
        fi
      continue-on-error: true

    - name: Import sort check with isort
      run: |
        if [ -d "src" ] || [ -d "tests" ]; then
          isort --check src/ tests/ 2>/dev/null || echo "isort check completed"
        else
          echo "No src/ or tests/ directories to check"
        fi
      continue-on-error: true

    - name: Run unit tests
      run: |
        # Find and run all tests in the project
        if [ -d "tests" ]; then
          pytest tests/ -v --tb=short || true
        elif [ -d "scripts/tests" ]; then
          pytest scripts/tests/ -v --tb=short || true
        else
          echo "No tests directory found - skipping unit tests"
        fi
      continue-on-error: true

    - name: Run integration tests
      run: |
        # Run integration tests if they exist
        if [ -d "tests/integration" ]; then
          pytest tests/integration/ -v --tb=short || true
        else
          echo "No integration tests found - skipping"
        fi
      continue-on-error: true

    - name: Run all tests with coverage
      run: |
        # Find test directories and run with coverage
        TEST_DIRS=""
        [ -d "tests" ] && TEST_DIRS="tests"
        [ -d "scripts/tests" ] && TEST_DIRS="${TEST_DIRS:+$TEST_DIRS }scripts/tests"
        
        # Find all test directories in src
        if [ -d "src" ]; then
          for dir in $(find src -name "tests" -type d 2>/dev/null); do
            TEST_DIRS="${TEST_DIRS:+$TEST_DIRS }$dir"
          done
        fi
        
        if [ -n "$TEST_DIRS" ]; then
          echo "Running tests in: $TEST_DIRS"
          pytest $TEST_DIRS --cov=src --cov-report=xml --cov-report=term --cov-report=html --tb=short || true
          # Show coverage summary if it exists
          if [ -f coverage.xml ]; then
            echo "Coverage Summary:"
            coverage report --skip-covered --show-missing || true
          fi
        else
          echo "No tests found - creating empty coverage file"
          # Create empty coverage file to prevent upload errors
          echo '<?xml version="1.0" ?><coverage version="1.0"><packages></packages></coverage>' > coverage.xml
        fi
      continue-on-error: true

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
      if: always()

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}
        fail_ci_if_error: false
        verbose: true
      if: always()

  test-examples:
    runs-on: ubuntu-latest
    needs: full-test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Test all examples
      run: |
        # Create necessary directories
        mkdir -p output
        mkdir -p data/outputs
        mkdir -p examples/data/outputs

        # Run each example file
        for example in examples/*.py; do
          if [[ -f "$example" && "$example" != *"__"* && "$example" != *"test_"* ]]; then
            echo "Testing $example"
            python "$example" || echo "Failed: $example"
            echo "---"
          fi
        done
      continue-on-error: true
