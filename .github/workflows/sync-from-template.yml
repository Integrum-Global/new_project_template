name: Sync from Template

on:
  # Manual trigger only - no automatic syncs
  workflow_dispatch:
    inputs:
      create_pr:
        description: 'Create PR (true) or just show diff (false)'
        required: false
        type: boolean
        default: true

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Pull template updates
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEMPLATE_REPO: Integrum-Global/new_project_template
        run: |
          # Add template as remote
          git remote add template https://github.com/${TEMPLATE_REPO}.git || true
          git fetch template main
          
          # Create sync branch
          BRANCH_NAME="template-sync-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $BRANCH_NAME
          
          # Get list of files to sync from template
          SYNC_FILES=(
            # GitHub configuration
            ".github"
            
            # Reference - always sync entire directory
            "reference"
            
            # Guide - specific files/dirs to always sync
            "guide/adr/0000-template.md"
            "guide/adr/README.md"
            "guide/frontend"
            "guide/instructions"
            "mistakes/000-master.md"
            "mistakes/README.md"
            "mistakes/template.md"
            "todos/README.md"
            "guide/workflows"
            
            # Scripts - always sync entire directory
            "scripts"
            
            # Shared source code
            "src/shared"
            
            # Root configuration files
            ".pre-commit-config.yaml"
            "MANIFEST.in"
          )
          
          # Files to sync only if missing (preserve existing)
          SYNC_IF_MISSING=(
            # Root files
            "README.md"
            "pyproject.toml"
            "CHANGELOG.md"
            "CLAUDE.md"
            
            # Data directories
            "data/configs"
            "data/samples"
            
            # Code directories
            "examples"
            "docs"
            "src/solutions"
            "todos"
            
            # Guide files/dirs not in SYNC_FILES
            "guide/adr"  # Other ADR files
            "mistakes"  # Other mistake files
            "todos"  # Other todo files
            
            # Templates directory
            "templates"
          )
          
          # Files that need special merge handling
          MERGE_FILES=(
            "CLAUDE.md"
          )
          
          # Sync each file/directory (always overwrite)
          for item in "${SYNC_FILES[@]}"; do
            if git ls-tree template/main --name-only | grep -q "^$item"; then
              git checkout template/main -- "$item" 2>/dev/null || true
            fi
          done
          
          # Sync files only if they don't exist (preserve existing)
          for item in "${SYNC_IF_MISSING[@]}"; do
            if git ls-tree template/main --name-only | grep -q "^$item" && [ ! -e "$item" ]; then
              git checkout template/main -- "$item" 2>/dev/null || true
            fi
          done
          
          # Handle files that need merging
          for item in "${MERGE_FILES[@]}"; do
            if git ls-tree template/main --name-only | grep -q "^$item"; then
              if [ -e "$item" ]; then
                # File exists, need to merge
                echo "Merging $item..."
                
                # Get the template version
                git show template/main:"$item" > "${item}.template"
                
                # For CLAUDE.md, preserve project-specific instructions
                if grep -q "## Project-Specific Instructions" "$item"; then
                  # Extract project-specific section
                  sed -n '/## Project-Specific Instructions/,$p' "$item" > "${item}.project"
                  
                  # Check if template already has project-specific section
                  if ! grep -q "## Project-Specific Instructions" "${item}.template"; then
                    # Append project section to template
                    cat "${item}.template" > "$item"
                    echo "" >> "$item"
                    cat "${item}.project" >> "$item"
                  else
                    # Template already has the section, just use template version
                    cp "${item}.template" "$item"
                  fi
                  rm -f "${item}.project"
                else
                  # No project-specific section, use template version
                  cp "${item}.template" "$item"
                fi
                
                rm -f "${item}.template"
              else
                # File doesn't exist, just sync from template
                git checkout template/main -- "$item" 2>/dev/null || true
              fi
            fi
          done
          
          # Check if there are changes
          if [[ -n $(git status --porcelain) ]]; then
            git add -A
            git commit -m "Sync template updates from ${TEMPLATE_REPO} - Automated sync at $(date -u +%Y-%m-%dT%H:%M:%SZ)"
            
            # Push and create PR
            git push origin HEAD
            
            gh pr create \
              --title "Sync template updates" \
              --body "Automated template sync from ${TEMPLATE_REPO} at $(date -u +%Y-%m-%dT%H:%M:%SZ). Please review changes for conflicts and ensure existing functionality works." \
              --base main
          else
            echo "No changes to sync"
          fi