name: Sync from Template

on:
  # Manual trigger only - downstream repos run this workflow
  workflow_dispatch:
    inputs:
      create_pr:
        description: 'Create PR (true) or just show diff (false)'
        required: false
        type: boolean
        default: true

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull template updates
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEMPLATE_REPO: Integrum-Global/new_project_template
        run: |
          # Add template as remote
          git remote add template https://github.com/${TEMPLATE_REPO}.git || true
          git fetch template main

          # Create sync branch
          BRANCH_NAME="template-sync-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $BRANCH_NAME

          # Get list of files to sync from template (ALWAYS REPLACE)
          SYNC_FILES=(
            # SDK guidance - always sync entire directory
            "sdk-users"
            # Main CLAUDE.md - always sync (contains latest development patterns)
            "CLAUDE.md"
            # Essential GitHub workflows for client CI/CD
            ".github/workflows/unified-ci.yml"
            ".github/workflows/security-report.yml"
            ".github/workflows/sync-from-template.yml"
            ".github/workflows/template-sync-check.yml"
            ".github/workflows/template-init.yml"
            ".github/workflows/template-cleanup.yml"
            ".github/workflows/README.md"
            # Example apps - always sync/replace from template
            "apps/qa_agentic_testing"
            "apps/studio"
            "apps/user_management"
          )

          # Files to sync only if missing (preserve existing)
          SYNC_IF_MISSING=(
            # Root files - create if missing but don't overwrite client customizations
            "README.md"
            "pyproject.toml"
            "CHANGELOG.md"
            ".gitignore"
            ".env.example"

            # Template structure - sync if missing but preserve client implementations
            "solutions"
            "deployment"
            "infrastructure"
            "data"
            "docs"
            "scripts"
            # src/ directory is NEVER synced - this is where client projects live
          )

          # Files that need special merge handling
          MERGE_FILES=(
            # No files need special merging with current sync-if-missing strategy
          )

          # Directories that should be merged (add new, preserve existing)
          MERGE_DIRS=(
            # No directories need merging with current sync-if-missing strategy
          )

          # IMPORTANT: src/ directory is NEVER synced - it contains client project code
          # Client projects should be in src/project_name/module_name structure
          
          # Sync each file/directory (always overwrite)
          for item in "${SYNC_FILES[@]}"; do
            if git ls-tree template/main --name-only | grep -q "^$item"; then
              git checkout template/main -- "$item" 2>/dev/null || true
            fi
          done

          # Sync files/directories only if they don't exist (preserve existing)
          for item in "${SYNC_IF_MISSING[@]}"; do
            if git ls-tree template/main --name-only | grep -q "^$item" && [ ! -e "$item" ]; then
              echo "Syncing missing item: $item"
              git checkout template/main -- "$item" 2>/dev/null || true
              # If it's a directory, sync all its contents recursively
              if [ -d "$item" ]; then
                git checkout template/main -- "$item/**" 2>/dev/null || true
              fi
            fi
          done

          # Handle files that need merging
          for item in "${MERGE_FILES[@]}"; do
            if git ls-tree template/main --name-only | grep -q "^$item"; then
              if [ -e "$item" ]; then
                # File exists, need to merge
                echo "Merging $item..."

                # Get the template version
                git show template/main:"$item" > "${item}.template"

                # For CLAUDE.md, preserve project-specific instructions
                if grep -q "## Project-Specific Instructions" "$item"; then
                  # Extract project-specific section
                  sed -n '/## Project-Specific Instructions/,$p' "$item" > "${item}.project"

                  # Check if template already has project-specific section
                  if ! grep -q "## Project-Specific Instructions" "${item}.template"; then
                    # Append project section to template
                    cat "${item}.template" > "$item"
                    echo "" >> "$item"
                    cat "${item}.project" >> "$item"
                  else
                    # Template already has the section, just use template version
                    cp "${item}.template" "$item"
                  fi
                  rm -f "${item}.project"
                else
                  # No project-specific section, use template version
                  cp "${item}.template" "$item"
                fi

                rm -f "${item}.template"
              else
                # File doesn't exist, just sync from template
                git checkout template/main -- "$item" 2>/dev/null || true
              fi
            fi
          done

          # Handle directories that need merging (add new files, preserve existing)
          for item in "${MERGE_DIRS[@]}"; do
            if git ls-tree template/main --name-only | grep -q "^$item"; then
              echo "Merging directory: $item"
              # Get new files from template without overwriting existing ones
              git checkout template/main -- "$item" 2>/dev/null || true
            fi
          done

          # Check if there are changes
          if [[ -n $(git status --porcelain) ]]; then
            git add -A
            git commit -m "Sync template updates from ${TEMPLATE_REPO} - Automated sync at $(date -u +%Y-%m-%dT%H:%M:%SZ)"

            # Push and create PR
            git push origin HEAD

            gh pr create \
              --title "Sync template updates" \
              --body "$(cat <<EOF
Automated template sync from ${TEMPLATE_REPO} at $(date -u +%Y-%m-%dT%H:%M:%SZ).

## ðŸ”„ What was synced (always replaced):
- **sdk-users/**: Latest SDK documentation and guides
- **CLAUDE.md**: Latest development patterns and workflows
- **GitHub Workflows**: Essential CI/CD workflows for client projects
  - unified-ci.yml (Primary CI/CD pipeline)
  - security-report.yml (Security scanning)
  - sync-from-template.yml (Template sync capability)
  - template-sync-check.yml (Sync validation)
  - template-init.yml (Repository setup)
  - template-cleanup.yml (Post-creation cleanup)
  - README.md (Workflow documentation)
- **Example Apps**: Latest versions of template example apps
  - apps/qa_agentic_testing (QA testing example)
  - apps/studio (Workflow studio example)
  - apps/user_management (User management example)
- **Template structure**: Added if missing (apps/_template/, solutions/, etc.)

## ðŸ“‹ What was preserved:
- **Client code**: Everything in src/ directory (your project code)
- **Client solutions**: All content in solutions/
- **Project management**: Client-specific todos/, adr/, mistakes/
- **Configuration**: Client-specific .env, existing pyproject.toml (if present)
- **Data**: Client-specific data/ directory
- **Custom workflows**: Client-specific GitHub Actions remain untouched

## âœ… Review notes:
- Essential workflows ensure your CI/CD stays current with template improvements
- Client customizations and implementations remain completely protected
- Template structure additions only happen if directories are missing

**Note:** This is a template sync PR - CI validation focuses on template structure.
EOF
)" \
              --base main
          else
            echo "No changes to sync"
          fi
