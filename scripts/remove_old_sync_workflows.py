#!/usr/bin/env python3
"""
Remove Old Sync Workflows Script

Removes the deprecated sync-project-workflows.yml and sync-sdk-users.yml files
from all downstream repositories that still have them.
"""

import json
import subprocess
import sys
from typing import List, Optional


def run_command(cmd: List[str]) -> Optional[str]:
    """Run a command and return the output."""
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"Error running command {' '.join(cmd)}: {e}")
        if e.stderr:
            print(f"Error output: {e.stderr}")
        return None


def get_downstream_repos() -> List[str]:
    """Get list of downstream repositories with kailash-template topic."""
    print("üîç Finding downstream repositories...")
    
    cmd = [
        "gh",
        "api",
        "--paginate",
        "/orgs/Integrum-Global/repos",
        "--jq",
        '.[] | select(.topics[]? | contains("kailash-template")) | .full_name',
    ]
    
    output = run_command(cmd)
    if not output:
        return []
    
    repos = [r.strip() for r in output.split("\n") if r.strip()]
    # Exclude the template repo itself
    repos = [r for r in repos if r != "Integrum-Global/new_project_template"]
    
    print(f"Found {len(repos)} downstream repositories")
    return repos


def check_file_exists(repo: str, file_path: str) -> bool:
    """Check if a file exists in a repository."""
    cmd = [
        "gh",
        "api",
        f"/repos/{repo}/contents/{file_path}",
        "--jq",
        ".name"
    ]
    output = run_command(cmd)
    return output is not None


def create_removal_pr(repo: str) -> bool:
    """Create a PR to remove the old workflow files."""
    print(f"\nüìù Creating PR for {repo}...")
    
    # Clone the repo
    repo_name = repo.split("/")[1]
    print(f"  Cloning {repo}...")
    if run_command(["git", "clone", f"https://github.com/{repo}.git", repo_name]) is None:
        return False
    
    # Change to repo directory
    import os
    original_dir = os.getcwd()
    os.chdir(repo_name)
    
    try:
        # Create a new branch
        branch_name = "remove-deprecated-sync-workflows"
        if run_command(["git", "checkout", "-b", branch_name]) is None:
            return False
        
        # Remove the files if they exist
        files_removed = []
        workflow_files = [
            ".github/workflows/sync-project-workflows.yml",
            ".github/workflows/sync-sdk-users.yml"
        ]
        
        for file_path in workflow_files:
            if os.path.exists(file_path):
                os.remove(file_path)
                files_removed.append(file_path)
                print(f"  ‚úÖ Removed {file_path}")
        
        if not files_removed:
            print(f"  ‚ÑπÔ∏è  No deprecated workflows found in {repo}")
            return True
        
        # Commit the changes
        run_command(["git", "add", "-A"])
        commit_message = """Remove deprecated sync workflows

These workflows were trying to sync from the restricted kailash_python_sdk repository,
which is no longer accessible. The template repository has already removed these files.

Removed files:
""" + "\n".join(f"- {f}" for f in files_removed) + "\n\nü§ñ Generated by template cleanup script"
        
        if run_command(["git", "commit", "-m", commit_message]) is None:
            return False
        
        # Push the branch
        if run_command(["git", "push", "-u", "origin", branch_name]) is None:
            return False
        
        # Create the PR
        pr_body = """## Summary

This PR removes deprecated workflow files that were trying to sync from the restricted `kailash_python_sdk` repository.

### Files Removed
""" + "\n".join(f"- `{f}`" for f in files_removed) + """

### Why These Changes?
- The `kailash_python_sdk` repository has restricted access
- These workflows have been failing with "Repository not found" errors
- The template repository has already removed these workflows
- Manual updates will be used instead of automated sync

### Impact
- ‚úÖ Eliminates failing workflow runs
- ‚úÖ Cleans up Actions tab
- ‚úÖ No functional impact (workflows were already failing)

---
*This PR was automatically generated by the template cleanup script.*
"""
        
        cmd = [
            "gh", "pr", "create",
            "--repo", repo,
            "--title", "Remove deprecated sync workflows",
            "--body", pr_body,
            "--head", branch_name
        ]
        
        output = run_command(cmd)
        if output:
            print(f"  ‚úÖ Created PR: {output}")
            return True
        else:
            return False
            
    finally:
        # Return to original directory
        os.chdir(original_dir)
        # Clean up cloned repo
        import shutil
        shutil.rmtree(repo_name, ignore_errors=True)


def main():
    """Main function to remove old sync workflows from all downstream repos."""
    print("üßπ Removing Deprecated Sync Workflows from Downstream Repositories")
    print("=" * 60)
    
    # Get all downstream repos
    repos = get_downstream_repos()
    if not repos:
        print("No downstream repositories found.")
        return
    
    # Check which repos have the deprecated workflows
    repos_with_old_workflows = []
    for repo in repos:
        print(f"\nChecking {repo}...")
        has_old_workflow = False
        
        if check_file_exists(repo, ".github/workflows/sync-project-workflows.yml"):
            print(f"  ‚ö†Ô∏è  Found sync-project-workflows.yml")
            has_old_workflow = True
            
        if check_file_exists(repo, ".github/workflows/sync-sdk-users.yml"):
            print(f"  ‚ö†Ô∏è  Found sync-sdk-users.yml")
            has_old_workflow = True
            
        if has_old_workflow:
            repos_with_old_workflows.append(repo)
        else:
            print(f"  ‚úÖ No deprecated workflows found")
    
    if not repos_with_old_workflows:
        print("\n‚úÖ All repositories are already clean!")
        return
    
    print(f"\nüìã Found {len(repos_with_old_workflows)} repositories with deprecated workflows:")
    for repo in repos_with_old_workflows:
        print(f"  - {repo}")
    
    # Check for --yes flag
    import sys
    if "--yes" not in sys.argv:
        try:
            response = input("\nDo you want to create PRs to remove these workflows? (y/N): ")
            if response.lower() != 'y':
                print("Aborted.")
                return
        except EOFError:
            print("\n‚ö†Ô∏è  Running in non-interactive mode. Use --yes to confirm.")
            return
    
    # Create PRs for each repo
    success_count = 0
    for repo in repos_with_old_workflows:
        if create_removal_pr(repo):
            success_count += 1
    
    print(f"\n‚úÖ Created {success_count}/{len(repos_with_old_workflows)} PRs successfully")
    
    if success_count < len(repos_with_old_workflows):
        print("\n‚ö†Ô∏è  Some PRs failed to create. You may need to handle those manually.")


if __name__ == "__main__":
    main()