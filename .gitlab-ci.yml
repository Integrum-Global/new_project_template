# GitLab CI/CD Pipeline Configuration

# Global settings
image: python:3.11

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  TERRAFORM_VERSION: "1.5.0"
  HELM_VERSION: "3.13.0"
  KUBECTL_VERSION: "1.28.0"
  
  # Container registry
  REGISTRY: $CI_REGISTRY
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  
  # Kubernetes namespace
  K8S_NAMESPACE_DEV: "kailash-dev"
  K8S_NAMESPACE_STAGING: "kailash-staging"
  K8S_NAMESPACE_PROD: "kailash-prod"

# Caching
cache:
  paths:
    - .cache/pip
    - node_modules/
    - .terraform/

# Stages
stages:
  - validate
  - build
  - test
  - security
  - deploy
  - verify
  - cleanup

# Anchors for reusable configurations
.python_setup: &python_setup
  before_script:
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt

.docker_setup: &docker_setup
  image: docker:24
  services:
    - docker:24-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.k8s_setup: &k8s_setup
  image: bitnami/kubectl:$KUBECTL_VERSION
  before_script:
    - kubectl config set-cluster k8s --server="$KUBE_URL" --insecure-skip-tls-verify=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster=k8s --user=gitlab
    - kubectl config use-context default

# Validation stage
lint:python:
  stage: validate
  <<: *python_setup
  script:
    - black --check src/ tests/
    - flake8 src/ tests/
    - mypy src/
    - pylint src/
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

lint:dockerfile:
  stage: validate
  image: hadolint/hadolint:latest-alpine
  script:
    - hadolint Dockerfile
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - Dockerfile

lint:terraform:
  stage: validate
  image: hashicorp/terraform:$TERRAFORM_VERSION
  script:
    - cd deployment/terraform
    - terraform fmt -check -recursive
    - |
      for dir in aws gcp azure; do
        cd $dir
        terraform init -backend=false
        terraform validate
        cd ..
      done
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - deployment/terraform/**/*

lint:kubernetes:
  stage: validate
  image: instrumenta/kubeval:latest
  script:
    - kubeval deployment/kubernetes/**/*.yaml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - deployment/kubernetes/**/*

# Build stage
build:docker:
  stage: build
  <<: *docker_setup
  script:
    - docker build -t $IMAGE_NAME:$CI_COMMIT_SHA .
    - docker tag $IMAGE_NAME:$CI_COMMIT_SHA $IMAGE_NAME:$CI_COMMIT_REF_SLUG
    - docker push $IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $IMAGE_NAME:$CI_COMMIT_REF_SLUG
    
    # Tag as latest if on main branch
    - |
      if [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]; then
        docker tag $IMAGE_NAME:$CI_COMMIT_SHA $IMAGE_NAME:latest
        docker push $IMAGE_NAME:latest
      fi
    
    # Tag with version if tagged
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        docker tag $IMAGE_NAME:$CI_COMMIT_SHA $IMAGE_NAME:$CI_COMMIT_TAG
        docker push $IMAGE_NAME:$CI_COMMIT_TAG
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

build:docs:
  stage: build
  image: python:3.11
  script:
    - pip install mkdocs mkdocs-material
    - mkdocs build
  artifacts:
    paths:
      - site/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - docs/**/*
        - mkdocs.yml

# Test stage
test:unit:
  stage: test
  <<: *python_setup
  script:
    - pytest tests/unit/ --cov=src --cov-report=xml --cov-report=html --junitxml=report.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

test:integration:
  stage: test
  <<: *python_setup
  services:
    - postgres:15
    - redis:7-alpine
  variables:
    POSTGRES_DB: test
    POSTGRES_USER: test
    POSTGRES_PASSWORD: test
    DATABASE_URL: "postgresql://test:test@postgres:5432/test"
    REDIS_URL: "redis://redis:6379"
  script:
    - pytest tests/integration/ --timeout=5
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

test:e2e:
  stage: test
  image: mcr.microsoft.com/playwright:v1.40.0-focal
  script:
    - npm ci
    - npx playwright test --config=tests/e2e/playwright.config.ts
  artifacts:
    when: always
    paths:
      - playwright-report/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Security stage
security:dependencies:
  stage: security
  <<: *python_setup
  script:
    - pip install safety bandit
    - safety check --json > safety-report.json || true
    - bandit -r src/ -f json -o bandit-report.json || true
  artifacts:
    reports:
      dependency_scanning: safety-report.json
      sast: bandit-report.json
    paths:
      - safety-report.json
      - bandit-report.json
    expire_in: 1 week

security:container:
  stage: security
  image: aquasec/trivy:latest
  script:
    - trivy image --format json --output trivy-report.json $IMAGE_NAME:$CI_COMMIT_SHA
  artifacts:
    reports:
      container_scanning: trivy-report.json
    paths:
      - trivy-report.json
    expire_in: 1 week
  needs:
    - build:docker

security:secrets:
  stage: security
  image: trufflesecurity/trufflehog:latest
  script:
    - trufflehog git file://. --json > secrets-report.json || true
  artifacts:
    paths:
      - secrets-report.json
    expire_in: 1 week
  allow_failure: true

security:license:
  stage: security
  image: licensefinder/license_finder:latest
  script:
    - license_finder report --format json > licenses.json
  artifacts:
    paths:
      - licenses.json
    expire_in: 1 week

# Deploy stage
deploy:dev:
  stage: deploy
  <<: *k8s_setup
  environment:
    name: development
    url: https://dev.kailash.example.com
    on_stop: cleanup:dev
  script:
    - helm upgrade --install kailash-dev ./deployment/helm/kailash
      --namespace $K8S_NAMESPACE_DEV
      --create-namespace
      --values ./deployment/helm/kailash/values-dev.yaml
      --set image.repository=$IMAGE_NAME
      --set image.tag=$CI_COMMIT_SHA
      --wait
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      when: on_success

deploy:staging:
  stage: deploy
  <<: *k8s_setup
  environment:
    name: staging
    url: https://staging.kailash.example.com
    on_stop: cleanup:staging
  script:
    - helm upgrade --install kailash-staging ./deployment/helm/kailash
      --namespace $K8S_NAMESPACE_STAGING
      --create-namespace
      --values ./deployment/helm/kailash/values-staging.yaml
      --set image.repository=$IMAGE_NAME
      --set image.tag=$CI_COMMIT_SHA
      --wait
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success

deploy:production:
  stage: deploy
  <<: *k8s_setup
  environment:
    name: production
    url: https://kailash.example.com
    on_stop: cleanup:production
  script:
    - helm upgrade --install kailash-prod ./deployment/helm/kailash
      --namespace $K8S_NAMESPACE_PROD
      --create-namespace
      --values ./deployment/helm/kailash/values-prod.yaml
      --set image.repository=$IMAGE_NAME
      --set image.tag=$CI_COMMIT_TAG
      --wait
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
      allow_failure: false

# Verify stage
verify:dev:
  stage: verify
  image: curlimages/curl:latest
  script:
    - curl -f https://dev.kailash.example.com/health
  needs:
    - deploy:dev
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

verify:staging:
  stage: verify
  image: curlimages/curl:latest
  script:
    - curl -f https://staging.kailash.example.com/health
    - |
      # Run smoke tests
      response=$(curl -s https://staging.kailash.example.com/api/v1/status)
      echo $response | grep -q "ok" || exit 1
  needs:
    - deploy:staging
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

verify:production:
  stage: verify
  image: curlimages/curl:latest
  script:
    - curl -f https://kailash.example.com/health
    - |
      # Run critical path tests
      for endpoint in status version metrics; do
        curl -f https://kailash.example.com/api/v1/$endpoint || exit 1
      done
  needs:
    - deploy:production
  rules:
    - if: $CI_COMMIT_TAG

# Cleanup stage
cleanup:dev:
  stage: cleanup
  <<: *k8s_setup
  environment:
    name: development
    action: stop
  script:
    - helm uninstall kailash-dev --namespace $K8S_NAMESPACE_DEV
    - kubectl delete namespace $K8S_NAMESPACE_DEV --ignore-not-found
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

cleanup:staging:
  stage: cleanup
  <<: *k8s_setup
  environment:
    name: staging
    action: stop
  script:
    - helm uninstall kailash-staging --namespace $K8S_NAMESPACE_STAGING
    - kubectl delete namespace $K8S_NAMESPACE_STAGING --ignore-not-found
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

cleanup:production:
  stage: cleanup
  <<: *k8s_setup
  environment:
    name: production
    action: stop
  script:
    - echo "Production cleanup requires additional approval"
  when: manual
  rules:
    - if: $CI_COMMIT_TAG

# Additional jobs
pages:
  stage: deploy
  script:
    - echo "Deploying documentation to GitLab Pages"
  artifacts:
    paths:
      - public
  only:
    - main
  needs:
    - build:docs
  before_script:
    - mv site public

# Performance testing (scheduled)
performance:load-test:
  stage: test
  image: loadimpact/k6:latest
  script:
    - k6 run tests/performance/load-test.js
      --out json=load-test-results.json
      --vus 100
      --duration 10m
  artifacts:
    paths:
      - load-test-results.json
    expire_in: 1 month
  only:
    - schedules
  variables:
    K6_CLOUD_TOKEN: $K6_CLOUD_TOKEN
    BASE_URL: https://staging.kailash.example.com

# Database migrations
migrate:staging:
  stage: deploy
  <<: *k8s_setup
  script:
    - kubectl run migrations-$CI_COMMIT_SHA
      --image=$IMAGE_NAME:$CI_COMMIT_SHA
      --namespace=$K8S_NAMESPACE_STAGING
      --rm
      --attach
      --restart=Never
      -- python manage.py migrate
  needs:
    - deploy:staging
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

migrate:production:
  stage: deploy
  <<: *k8s_setup
  script:
    - kubectl run migrations-$CI_COMMIT_SHA
      --image=$IMAGE_NAME:$CI_COMMIT_TAG
      --namespace=$K8S_NAMESPACE_PROD
      --rm
      --attach
      --restart=Never
      -- python manage.py migrate
  needs:
    - deploy:production
  rules:
    - if: $CI_COMMIT_TAG
      when: manual