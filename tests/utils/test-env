#!/bin/bash
# Kailash SDK Test Environment Manager
# Provides standardized Docker services for integration and E2E testing

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/../.." && pwd )"
TEST_ENV_DIR="$PROJECT_ROOT/tests/test-environment"

# Load environment variables
if [ -f "$PROJECT_ROOT/.env.test" ]; then
    export $(cat "$PROJECT_ROOT/.env.test" | grep -v '^#' | xargs)
fi

# Helper functions
print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

print_info() {
    echo -e "${YELLOW}→${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    print_info "Checking prerequisites..."

    # Check Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker is not installed. Please install Docker first."
        exit 1
    fi

    # Check Docker Compose
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        print_error "Docker Compose is not installed. Please install Docker Compose first."
        exit 1
    fi

    # Check if Docker daemon is running
    if ! docker info &> /dev/null; then
        print_error "Docker daemon is not running. Please start Docker."
        exit 1
    fi

    print_success "Prerequisites checked"
}

# Setup test environment
setup_environment() {
    print_info "Setting up test environment..."

    # Create necessary directories
    mkdir -p "$TEST_ENV_DIR/data"
    mkdir -p "$TEST_ENV_DIR/logs"

    # Pull required Docker images
    print_info "Pulling Docker images..."
    cd "$TEST_ENV_DIR"
    docker-compose pull

    # Pull Ollama models if using Ollama
    if docker-compose ps | grep -q ollama; then
        print_info "Setting up Ollama models..."
        docker-compose up -d test-ollama
        sleep 10  # Wait for Ollama to start

        # Pull commonly used models
        docker-compose exec -T test-ollama ollama pull llama3.2:latest || true
        docker-compose exec -T test-ollama ollama pull nomic-embed-text:latest || true
    fi

    print_success "Test environment setup complete"
}

# Start services
start_services() {
    print_info "Starting test services..."
    cd "$TEST_ENV_DIR"

    # Start all services
    docker-compose up -d

    # Wait for services to be healthy
    print_info "Waiting for services to be healthy..."
    local retries=30
    local count=0

    while [ $count -lt $retries ]; do
        if docker-compose ps | grep -E "(unhealthy|starting)" > /dev/null; then
            printf "."
            sleep 2
            count=$((count + 1))
        else
            echo ""
            print_success "All services are healthy"
            return 0
        fi
    done

    echo ""
    print_error "Some services failed to start. Check logs with: $0 logs"
    return 1
}

# Stop services
stop_services() {
    print_info "Stopping test services..."
    cd "$TEST_ENV_DIR"
    docker-compose down
    print_success "Services stopped"
}

# Show service status
show_status() {
    cd "$TEST_ENV_DIR"
    docker-compose ps

    echo ""
    print_info "Service URLs:"
    echo "  PostgreSQL: localhost:5434"
    echo "  MySQL: localhost:3307"
    echo "  Redis: localhost:6380"
    echo "  Ollama: http://localhost:11435"
    echo "  MinIO: http://localhost:9000 (console: http://localhost:9001)"
    echo "  Health Check: http://localhost:8080"
}

# Run tests
run_tests() {
    local tier=${1:-all}

    cd "$PROJECT_ROOT"

    case $tier in
        tier1|unit)
            print_info "Running Tier 1 (Unit) tests (excluding slow tests with sleep/timeout)..."
            # Exclude tests with sleep/timeout calls for fast CI
            IGNORE_SLOW="--ignore=tests/unit/core/test_adaptive_pool_controller.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/core/test_circuit_breaker.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/core/test_connection_metrics.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/gateway/test_enhanced_gateway.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/middleware/test_checkpoint_manager.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/nodes/code/test_async_python.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/nodes/test_a2a.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/nodes/test_async_operations.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/nodes/test_query_pipeline.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/nodes/test_sync_async_separation.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/nodes/test_workflow_connection_pool.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/runtime/test_async_local.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/runtime/test_local.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/scenarios/test_cycle_scenarios.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/test_architecture_refactoring.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/testing/test_async_test_case.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/testing/test_async_utils.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/testing/test_fixtures.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/tracking/test_metrics_collector.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/utils/test_resource_manager_simple.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/workflow/test_async_workflow_builder.py"
            IGNORE_SLOW="$IGNORE_SLOW --ignore=tests/unit/workflows/test_convergence_safety.py"
            pytest tests/unit/ -v $IGNORE_SLOW
            ;;
        tier2|integration)
            print_info "Running Tier 2 (Integration) tests..."
            pytest tests/integration/ -v
            ;;
        tier3|e2e)
            print_info "Running Tier 3 (E2E) tests..."
            pytest tests/e2e/ -v
            ;;
        all)
            print_info "Running all tests..."
            pytest tests/ -v
            ;;
        *)
            print_error "Unknown test tier: $tier"
            echo "Usage: $0 test [tier1|tier2|tier3|all]"
            exit 1
            ;;
    esac
}

# Show logs
show_logs() {
    local service=${1:-}
    cd "$TEST_ENV_DIR"

    if [ -z "$service" ]; then
        docker-compose logs -f
    else
        docker-compose logs -f "$service"
    fi
}

# Clean up
cleanup() {
    print_info "Cleaning up test environment..."
    cd "$TEST_ENV_DIR"

    # Stop and remove containers
    docker-compose down -v

    # Remove data directories
    rm -rf "$TEST_ENV_DIR/data"
    rm -rf "$TEST_ENV_DIR/logs"

    print_success "Cleanup complete"
}

# Main command handler
case "${1:-help}" in
    setup)
        check_prerequisites
        setup_environment
        ;;
    up|start)
        check_prerequisites
        start_services
        ;;
    down|stop)
        stop_services
        ;;
    status|ps)
        show_status
        ;;
    test)
        run_tests "${2:-all}"
        ;;
    logs)
        show_logs "${2:-}"
        ;;
    clean|cleanup)
        cleanup
        ;;
    help|--help|-h)
        echo "Kailash SDK Test Environment Manager"
        echo ""
        echo "Usage: $0 COMMAND [OPTIONS]"
        echo ""
        echo "Commands:"
        echo "  setup      - Initial setup (pull images, download models)"
        echo "  up, start  - Start all test services"
        echo "  down, stop - Stop all test services"
        echo "  status, ps - Show service status"
        echo "  test [tier] - Run tests (tier1/unit, tier2/integration, tier3/e2e, all)"
        echo "  logs [service] - Show logs (optionally for specific service)"
        echo "  clean      - Clean up everything (containers, volumes, data)"
        echo ""
        echo "Examples:"
        echo "  $0 setup       # One-time setup"
        echo "  $0 up          # Start services"
        echo "  $0 test tier2  # Run integration tests"
        echo "  $0 logs ollama # Show Ollama logs"
        echo "  $0 down        # Stop services"
        ;;
    *)
        print_error "Unknown command: $1"
        echo "Run '$0 help' for usage information"
        exit 1
        ;;
esac
