# Kailash SDK Test Environment
# Comprehensive testing infrastructure with all required services
# Based on production-quality patterns from Kailash Studio

services:
  # PostgreSQL with admin schema and pgvector
  test-postgres:
    image: postgres:15
    container_name: kailash_sdk_test_postgres
    environment:
      POSTGRES_DB: kailash_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "5434:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./init-scripts/01-create-extensions.sql:/docker-entrypoint-initdb.d/01-create-extensions.sql
      - ./init-scripts/02-admin-schema.sql:/docker-entrypoint-initdb.d/02-admin-schema.sql
      - ./init-scripts/03-sample-data.sql:/docker-entrypoint-initdb.d/03-sample-data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d kailash_test"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - kailash-test-network

  # Redis for caching and session management
  test-redis:
    image: redis:7-alpine
    container_name: kailash_sdk_test_redis
    ports:
      - "6380:6379"
    command: >
      redis-server
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save ""
      --appendonly no
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - kailash-test-network

  # MySQL for multi-database testing
  test-mysql:
    image: mysql:8.0
    container_name: kailash_sdk_test_mysql
    environment:
      MYSQL_ROOT_PASSWORD: test_password
      MYSQL_DATABASE: kailash_test
      MYSQL_USER: kailash_test
      MYSQL_PASSWORD: test_password
    ports:
      - "3307:3306"
    volumes:
      - mysql_test_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - kailash-test-network

  # Ollama for LLM testing without API costs
  test-ollama:
    image: ollama/ollama:latest
    container_name: kailash_sdk_test_ollama
    ports:
      - "11435:11434"
    volumes:
      - ollama_models:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_MODELS=/root/.ollama/models
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:11434/api/version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - kailash-test-network

  # MongoDB for document store testing
  test-mongodb:
    image: mongo:6
    container_name: kailash_sdk_test_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: kailash
      MONGO_INITDB_ROOT_PASSWORD: kailash123
      MONGO_INITDB_DATABASE: kailash_test
    ports:
      - "27017:27017"
    volumes:
      - mongodb_test_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kailash-test-network

  # Qdrant for vector database testing
  test-qdrant:
    image: qdrant/qdrant:latest
    container_name: kailash_sdk_test_qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_test_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
    networks:
      - kailash-test-network

  # MinIO for S3-compatible storage testing
  test-minio:
    image: minio/minio:latest
    container_name: kailash_sdk_test_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: test_admin
      MINIO_ROOT_PASSWORD: test_password_123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_test_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - kailash-test-network

  # Kafka for event streaming tests
  test-zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: kailash_sdk_test_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - kailash-test-network

  test-kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kailash_sdk_test_kafka
    depends_on:
      - test-zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: test-zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kailash-test-network

  # Elasticsearch for search testing
  test-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: kailash_sdk_test_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - kailash-test-network

  # Mock OAuth2 server for auth testing
  test-oauth2:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: kailash_sdk_test_oauth2
    ports:
      - "8080:4180"
    environment:
      - OAUTH2_PROXY_HTTP_ADDRESS=0.0.0.0:4180
      - OAUTH2_PROXY_CLIENT_ID=test-client
      - OAUTH2_PROXY_CLIENT_SECRET=test-secret
      - OAUTH2_PROXY_COOKIE_SECRET=test-cookie-secret-32-bytes-long!!
      - OAUTH2_PROXY_EMAIL_DOMAINS=*
      - OAUTH2_PROXY_UPSTREAMS=http://localhost:8000
      - OAUTH2_PROXY_PROVIDER=github
      - OAUTH2_PROXY_SKIP_PROVIDER_BUTTON=true
    networks:
      - kailash-test-network

  # Adminer for database management
  test-adminer:
    image: adminer:latest
    container_name: kailash_sdk_test_adminer
    ports:
      - "8090:8080"
    environment:
      ADMINER_DEFAULT_SERVER: test-postgres
    networks:
      - kailash-test-network

  # Health check dashboard
  test-healthcheck:
    image: nginx:alpine
    container_name: kailash_sdk_test_healthcheck
    ports:
      - "8091:80"
    volumes:
      - ./healthcheck/index.html:/usr/share/nginx/html/index.html
      - ./healthcheck/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - test-postgres
      - test-redis
      - test-mysql
      - test-ollama
    networks:
      - kailash-test-network

volumes:
  postgres_test_data:
  mysql_test_data:
  mongodb_test_data:
  ollama_models:
  qdrant_test_data:
  minio_test_data:
  elasticsearch_data:

networks:
  kailash-test-network:
    driver: bridge
    name: kailash_test_network
