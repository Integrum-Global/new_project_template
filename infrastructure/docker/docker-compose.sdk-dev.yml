version: '3.8'

# SDK Development Infrastructure
# This provides all services needed for running Kailash SDK examples and tests
# Start with: docker-compose -f docker-compose.sdk-dev.yml up -d
# Stop with: docker-compose -f docker-compose.sdk-dev.yml down

services:
  # PostgreSQL with multiple databases for examples
  postgres:
    image: postgres:15-alpine
    container_name: kailash-sdk-postgres
    environment:
      POSTGRES_USER: kailash
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kailash123}
      POSTGRES_DB: postgres
    volumes:
      - sdk_postgres_data:/var/lib/postgresql/data
      - ./init-sdk-dev-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kailash"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MongoDB for unstructured data
  mongodb:
    image: mongo:7.0
    container_name: kailash-sdk-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-kailash}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-kailash123}
      MONGO_INITDB_DATABASE: kailash
    volumes:
      - sdk_mongo_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init.js:ro
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MongoDB Express for debugging
  mongo-express:
    image: mongo-express:latest
    container_name: kailash-sdk-mongo-express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USERNAME:-kailash}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD:-kailash123}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_USERNAME:-kailash}:${MONGO_PASSWORD:-kailash123}@mongodb:27017/
      ME_CONFIG_BASICAUTH: false
    ports:
      - "8081:8081"
    depends_on:
      mongodb:
        condition: service_healthy
    restart: unless-stopped

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: kailash-sdk-qdrant
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__STORAGE__STORAGE_PATH: /qdrant/storage
    volumes:
      - sdk_qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Kafka for streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: kailash-sdk-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - sdk_zookeeper_data:/var/lib/zookeeper/data
      - sdk_zookeeper_logs:/var/lib/zookeeper/log
    ports:
      - "2181:2181"
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kailash-sdk-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - sdk_kafka_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Kafka UI for debugging
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kailash-sdk-kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8082:8080"
    depends_on:
      - kafka
    restart: unless-stopped

  # Ollama for local LLM
  ollama:
    image: ollama/ollama:latest
    container_name: kailash-sdk-ollama
    volumes:
      - sdk_ollama_models:/root/.ollama
    ports:
      - "11434:11434"
    environment:
      OLLAMA_KEEP_ALIVE: 24h
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    # Pull a small model on startup
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "ollama serve &
       sleep 5 &&
       ollama pull llama3.2:1b &&
       wait"

  # Mock API Server
  mock-api:
    build:
      context: ./mock-api-server
      dockerfile: Dockerfile
    container_name: kailash-sdk-mock-api
    environment:
      NODE_ENV: development
      PORT: 8888
    ports:
      - "8888:8888"
    volumes:
      - ./mock-api-server:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MCP Server (AI Registry)
  mcp-server:
    build:
      context: ..
      dockerfile: docker/Dockerfile.mcp-server
    container_name: kailash-sdk-mcp-server
    environment:
      MCP_SERVER_PORT: 8765
      PYTHONPATH: /app/src
    ports:
      - "8765:8765"
    volumes:
      - ../src:/app/src
      - ../sdk-contributors/research/combined_ai_registry.json:/app/research/combined_ai_registry.json
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8765/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Health check aggregator
  healthcheck:
    image: nginx:alpine
    container_name: kailash-sdk-healthcheck
    ports:
      - "8889:80"
    volumes:
      - ./healthcheck-nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - postgres
      - mongodb
      - qdrant
      - kafka
      - ollama
      - mock-api
      - mcp-server
    restart: unless-stopped

volumes:
  sdk_postgres_data:
    name: kailash_sdk_postgres_data
  sdk_mongo_data:
    name: kailash_sdk_mongo_data
  sdk_qdrant_data:
    name: kailash_sdk_qdrant_data
  sdk_zookeeper_data:
    name: kailash_sdk_zookeeper_data
  sdk_zookeeper_logs:
    name: kailash_sdk_zookeeper_logs
  sdk_kafka_data:
    name: kailash_sdk_kafka_data
  sdk_ollama_models:
    name: kailash_sdk_ollama_models

networks:
  default:
    name: kailash-sdk-network
