version: '3.8'

services:
  gateway:
    build: .
    container_name: mcp-enterprise-gateway
    ports:
      - "8000:8000"      # API port
      - "9090:9090"      # Metrics port
    environment:
      - DATABASE_URL=postgresql://gateway:gateway@postgres:5432/enterprise_gateway
      - REDIS_URL=redis://redis:6379
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
      - LOG_LEVEL=INFO
      - JWT_SECRET=${JWT_SECRET:-change-me-in-production}
    volumes:
      - ./config:/app/config:ro
      - ./certs:/app/certs:ro
      - gateway-logs:/app/logs
    depends_on:
      - postgres
      - redis
      - jaeger
    restart: unless-stopped
    networks:
      - gateway-network

  postgres:
    image: postgres:15-alpine
    container_name: mcp-gateway-postgres
    environment:
      - POSTGRES_USER=gateway
      - POSTGRES_PASSWORD=gateway
      - POSTGRES_DB=enterprise_gateway
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./deployment/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - gateway-network

  redis:
    image: redis:7-alpine
    container_name: mcp-gateway-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis-password}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - gateway-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: mcp-gateway-jaeger
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"    # Jaeger UI
      - "14268:14268"
      - "9411:9411"
    restart: unless-stopped
    networks:
      - gateway-network

  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-gateway-prometheus
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9091:9090"
    restart: unless-stopped
    networks:
      - gateway-network

  grafana:
    image: grafana/grafana:latest
    container_name: mcp-gateway-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deployment/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - gateway-network

  nginx:
    image: nginx:alpine
    container_name: mcp-gateway-nginx
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - gateway
    restart: unless-stopped
    networks:
      - gateway-network

  vault:
    image: vault:latest
    container_name: mcp-gateway-vault
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_TOKEN:-vault-token}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    ports:
      - "8200:8200"
    restart: unless-stopped
    networks:
      - gateway-network

volumes:
  gateway-logs:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  gateway-network:
    driver: bridge
