version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: mcp_password
      POSTGRES_DB: mcp_platform
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Core MCP Management Platform
  mcp-core:
    build:
      context: ../
      dockerfile: deployment/Dockerfile.core
    environment:
      DATABASE_URL: postgresql://mcp_user:mcp_password@postgres:5432/mcp_platform
      REDIS_URL: redis://redis:6379
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key}
      ENABLE_MONITORING: "true"
      HOST: 0.0.0.0
      PORT: 8000
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./config:/app/config:ro

  # Enterprise Gateway
  mcp-gateway:
    build:
      context: ../
      dockerfile: deployment/Dockerfile.gateway
    environment:
      DATABASE_URL: postgresql://mcp_user:mcp_password@postgres:5432/mcp_platform
      REDIS_URL: redis://redis:6379
      GATEWAY_HOST: 0.0.0.0
      GATEWAY_PORT: 8080
      GATEWAY_AUTH_SECRET: ${GATEWAY_AUTH_SECRET:-gateway-secret}
      ENABLE_MULTI_TENANCY: "true"
      MCP_CORE_URL: http://mcp-core:8000
    ports:
      - "8080:8080"
    depends_on:
      mcp-core:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Tool Server (Production)
  mcp-tools:
    build:
      context: ../
      dockerfile: deployment/Dockerfile.tools
    environment:
      MCP_SERVER_NAME: production-tools
      MCP_SERVER_PORT: 8090
      ENABLE_MONITORING: "true"
      REGISTRY_URL: http://mcp-core:8000
    ports:
      - "8090:8090"
    depends_on:
      mcp-core:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - mcp-core
      - mcp-gateway
      - mcp-tools
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    depends_on:
      - mcp-core
      - mcp-gateway
      - mcp-tools

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: mcp_platform_network
