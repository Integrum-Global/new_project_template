---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-scripts
  namespace: nexus-production
  labels:
    app: nexus
    component: backup
    environment: production
data:
  postgres-backup.sh: |
    #!/bin/bash
    set -e

    # Configuration
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    BACKUP_DIR="/backups/postgres"
    S3_BUCKET="${S3_BACKUP_BUCKET}"
    RETENTION_DAYS=30

    # Create backup directory
    mkdir -p ${BACKUP_DIR}

    # Create PostgreSQL dump
    echo "Starting PostgreSQL backup at $(date)"
    pg_dump ${DATABASE_URL} | gzip > ${BACKUP_DIR}/nexus_backup_${TIMESTAMP}.sql.gz

    # Upload to S3
    if [ ! -z "${S3_BUCKET}" ]; then
        echo "Uploading backup to S3"
        aws s3 cp ${BACKUP_DIR}/nexus_backup_${TIMESTAMP}.sql.gz s3://${S3_BUCKET}/postgres/

        # Clean up old backups from S3
        aws s3 ls s3://${S3_BUCKET}/postgres/ | grep nexus_backup | \
            awk '{print $4}' | head -n -${RETENTION_DAYS} | \
            xargs -I {} aws s3 rm s3://${S3_BUCKET}/postgres/{}
    fi

    # Clean up local backups older than retention period
    find ${BACKUP_DIR} -name "nexus_backup_*.sql.gz" -mtime +${RETENTION_DAYS} -delete

    echo "PostgreSQL backup completed at $(date)"

  redis-backup.sh: |
    #!/bin/bash
    set -e

    # Configuration
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    BACKUP_DIR="/backups/redis"
    S3_BUCKET="${S3_BACKUP_BUCKET}"
    RETENTION_DAYS=30

    # Create backup directory
    mkdir -p ${BACKUP_DIR}

    # Create Redis backup
    echo "Starting Redis backup at $(date)"
    redis-cli --rdb ${BACKUP_DIR}/nexus_redis_${TIMESTAMP}.rdb
    gzip ${BACKUP_DIR}/nexus_redis_${TIMESTAMP}.rdb

    # Upload to S3
    if [ ! -z "${S3_BUCKET}" ]; then
        echo "Uploading Redis backup to S3"
        aws s3 cp ${BACKUP_DIR}/nexus_redis_${TIMESTAMP}.rdb.gz s3://${S3_BUCKET}/redis/

        # Clean up old backups from S3
        aws s3 ls s3://${S3_BUCKET}/redis/ | grep nexus_redis | \
            awk '{print $4}' | head -n -${RETENTION_DAYS} | \
            xargs -I {} aws s3 rm s3://${S3_BUCKET}/redis/{}
    fi

    # Clean up local backups
    find ${BACKUP_DIR} -name "nexus_redis_*.rdb.gz" -mtime +${RETENTION_DAYS} -delete

    echo "Redis backup completed at $(date)"

  restore-postgres.sh: |
    #!/bin/bash
    set -e

    BACKUP_FILE=$1
    if [ -z "${BACKUP_FILE}" ]; then
        echo "Usage: $0 <backup_file>"
        echo "Available backups:"
        aws s3 ls s3://${S3_BACKUP_BUCKET}/postgres/ | grep nexus_backup
        exit 1
    fi

    # Download backup if it's an S3 path
    if [[ $BACKUP_FILE == s3://* ]]; then
        LOCAL_FILE="/tmp/$(basename $BACKUP_FILE)"
        aws s3 cp $BACKUP_FILE $LOCAL_FILE
        BACKUP_FILE=$LOCAL_FILE
    fi

    # Restore database
    echo "Restoring PostgreSQL from ${BACKUP_FILE}"
    zcat $BACKUP_FILE | psql ${DATABASE_URL}
    echo "PostgreSQL restore completed"

  restore-redis.sh: |
    #!/bin/bash
    set -e

    BACKUP_FILE=$1
    if [ -z "${BACKUP_FILE}" ]; then
        echo "Usage: $0 <backup_file>"
        echo "Available backups:"
        aws s3 ls s3://${S3_BACKUP_BUCKET}/redis/ | grep nexus_redis
        exit 1
    fi

    # Download backup if it's an S3 path
    if [[ $BACKUP_FILE == s3://* ]]; then
        LOCAL_FILE="/tmp/$(basename $BACKUP_FILE)"
        aws s3 cp $BACKUP_FILE $LOCAL_FILE
        BACKUP_FILE=$LOCAL_FILE
    fi

    # Stop Redis, restore, and restart
    echo "Restoring Redis from ${BACKUP_FILE}"
    redis-cli FLUSHALL
    zcat $BACKUP_FILE > /tmp/restore.rdb
    redis-cli --rdb /tmp/restore.rdb
    echo "Redis restore completed"
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-backup
  namespace: nexus-production
  labels:
    app: nexus
    component: backup
    environment: production
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  timeZone: "UTC"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: nexus
            component: backup-postgres
        spec:
          serviceAccountName: nexus-backup-service-account
          restartPolicy: OnFailure
          containers:
          - name: postgres-backup
            image: postgres:15-alpine
            command: ["/scripts/postgres-backup.sh"]
            env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: nexus-secrets
                  key: database-url
            - name: S3_BACKUP_BUCKET
              valueFrom:
                secretKeyRef:
                  name: backup-secrets
                  key: s3-bucket
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: backup-secrets
                  key: aws-access-key-id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: backup-secrets
                  key: aws-secret-access-key
            volumeMounts:
            - name: backup-scripts
              mountPath: /scripts
            - name: backup-storage
              mountPath: /backups
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "512Mi"
                cpu: "500m"
          volumes:
          - name: backup-scripts
            configMap:
              name: backup-scripts
              defaultMode: 0755
          - name: backup-storage
            persistentVolumeClaim:
              claimName: backup-storage-pvc
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: redis-backup
  namespace: nexus-production
  labels:
    app: nexus
    component: backup
    environment: production
spec:
  schedule: "0 3 * * *"  # Daily at 3 AM
  timeZone: "UTC"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: nexus
            component: backup-redis
        spec:
          serviceAccountName: nexus-backup-service-account
          restartPolicy: OnFailure
          containers:
          - name: redis-backup
            image: redis:7-alpine
            command: ["/scripts/redis-backup.sh"]
            env:
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: nexus-secrets
                  key: redis-url
            - name: S3_BACKUP_BUCKET
              valueFrom:
                secretKeyRef:
                  name: backup-secrets
                  key: s3-bucket
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: backup-secrets
                  key: aws-access-key-id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: backup-secrets
                  key: aws-secret-access-key
            volumeMounts:
            - name: backup-scripts
              mountPath: /scripts
            - name: backup-storage
              mountPath: /backups
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "512Mi"
                cpu: "500m"
          volumes:
          - name: backup-scripts
            configMap:
              name: backup-scripts
              defaultMode: 0755
          - name: backup-storage
            persistentVolumeClaim:
              claimName: backup-storage-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backup-storage-pvc
  namespace: nexus-production
  labels:
    app: nexus
    component: backup
    environment: production
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 50Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: backup-secrets
  namespace: nexus-production
  labels:
    app: nexus
    component: backup
    environment: production
type: Opaque
stringData:
  s3-bucket: "nexus-backups-prod"
  aws-access-key-id: "your-aws-access-key-id"
  aws-secret-access-key: "your-aws-secret-access-key"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: disaster-recovery-test
  namespace: nexus-production
  labels:
    app: nexus
    component: disaster-recovery
    environment: production
spec:
  template:
    metadata:
      labels:
        app: nexus
        component: disaster-recovery-test
    spec:
      serviceAccountName: nexus-backup-service-account
      restartPolicy: Never
      containers:
      - name: dr-test
        image: nexus:production
        command: ["/scripts/disaster-recovery-test.sh"]
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: nexus-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: nexus-secrets
              key: redis-url
        volumeMounts:
        - name: backup-scripts
          mountPath: /scripts
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: backup-scripts
        configMap:
          name: backup-scripts
          defaultMode: 0755
