version: '3.8'

services:
  # DataFlow application
  dataflow:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    image: kailash-dataflow:latest
    container_name: dataflow-app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://dataflow:dataflow123@postgres:5432/dataflow_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - dataflow-network
    volumes:
      - dataflow-logs:/app/logs
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: dataflow-postgres
    environment:
      - POSTGRES_DB=dataflow_db
      - POSTGRES_USER=dataflow
      - POSTGRES_PASSWORD=dataflow123
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5434:5432"  # Using port 5434 to match tests/utils
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - dataflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dataflow -d dataflow_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_buffers=256MB
      -c max_connections=200
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: dataflow-redis
    ports:
      - "6380:6379"  # Using port 6380 to match tests/utils
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - dataflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: dataflow-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - dataflow
    restart: unless-stopped
    networks:
      - dataflow-network

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: dataflow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - dataflow-network

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: dataflow-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - dataflow-network

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: dataflow-pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@dataflow.local
      - PGADMIN_DEFAULT_PASSWORD=admin123
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    restart: unless-stopped
    networks:
      - dataflow-network

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  dataflow-logs:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  pgadmin-data:
    driver: local

networks:
  dataflow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
