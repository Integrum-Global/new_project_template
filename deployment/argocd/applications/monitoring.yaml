# Monitoring Stack Applications

# Prometheus Stack (includes Prometheus, Grafana, AlertManager)
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kube-prometheus-stack
  namespace: argocd
  labels:
    app.kubernetes.io/part-of: monitoring
spec:
  project: kailash
  
  source:
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: 55.5.0
    chart: kube-prometheus-stack
    helm:
      values: |
        fullnameOverride: prometheus
        
        # Prometheus configuration
        prometheus:
          prometheusSpec:
            replicas: 2
            retention: 30d
            retentionSize: 45GB
            storageSpec:
              volumeClaimTemplate:
                spec:
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 50Gi
                  storageClassName: fast
            resources:
              requests:
                memory: 2Gi
                cpu: 1
              limits:
                memory: 8Gi
                cpu: 4
            
            # Service monitors
            serviceMonitorSelectorNilUsesHelmValues: false
            serviceMonitorSelector:
              matchLabels:
                prometheus: kailash
            
            # Pod monitors
            podMonitorSelectorNilUsesHelmValues: false
            podMonitorSelector:
              matchLabels:
                prometheus: kailash
            
            # Probe selector
            probeSelectorNilUsesHelmValues: false
            probeSelector:
              matchLabels:
                prometheus: kailash
            
            # Rule selector
            ruleSelectorNilUsesHelmValues: false
            ruleSelector:
              matchLabels:
                prometheus: kailash
            
            # External labels
            externalLabels:
              cluster: kailash-prod
              environment: production
        
        # Grafana configuration
        grafana:
          enabled: true
          replicas: 2
          adminPassword: changeme  # Change in production
          
          persistence:
            enabled: true
            size: 10Gi
            storageClassName: standard
          
          ingress:
            enabled: true
            ingressClassName: nginx
            annotations:
              cert-manager.io/cluster-issuer: letsencrypt-prod
            hosts:
              - grafana.yourdomain.com
            tls:
              - secretName: grafana-tls
                hosts:
                  - grafana.yourdomain.com
          
          sidecar:
            dashboards:
              enabled: true
              searchNamespace: ALL
            datasources:
              enabled: true
              defaultDatasourceEnabled: true
          
          additionalDataSources:
            - name: Loki
              type: loki
              access: proxy
              url: http://loki:3100
            - name: Tempo
              type: tempo
              access: proxy
              url: http://tempo-query:16686
        
        # AlertManager configuration
        alertmanager:
          alertmanagerSpec:
            replicas: 3
            storage:
              volumeClaimTemplate:
                spec:
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 10Gi
                  storageClassName: standard
          
          config:
            global:
              resolve_timeout: 5m
              slack_api_url: 'YOUR_SLACK_WEBHOOK_URL'
            
            route:
              group_by: ['alertname', 'cluster', 'service']
              group_wait: 10s
              group_interval: 10s
              repeat_interval: 12h
              receiver: 'default'
              routes:
                - match:
                    severity: critical
                  receiver: pagerduty
                  continue: true
                - match:
                    severity: warning
                  receiver: slack
            
            receivers:
              - name: 'default'
                slack_configs:
                  - channel: '#alerts'
                    title: 'Alert'
                    text: '{{ range .Alerts }}{{ .Annotations.summary }}\n{{ end }}'
              
              - name: 'pagerduty'
                pagerduty_configs:
                  - service_key: 'YOUR_PAGERDUTY_KEY'
              
              - name: 'slack'
                slack_configs:
                  - channel: '#alerts-warning'
                    title: 'Warning'
        
        # Additional components
        kubeApiServer:
          enabled: true
        
        kubeControllerManager:
          enabled: true
        
        kubeScheduler:
          enabled: true
        
        kubeEtcd:
          enabled: true
        
        kubeProxy:
          enabled: true
        
        kubeStateMetrics:
          enabled: true
        
        nodeExporter:
          enabled: true
        
        prometheusOperator:
          enabled: true
  
  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true
---
# Loki (Log Aggregation)
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: loki
  namespace: argocd
  labels:
    app.kubernetes.io/part-of: monitoring
spec:
  project: kailash
  
  source:
    repoURL: https://grafana.github.io/helm-charts
    targetRevision: 5.41.4
    chart: loki
    helm:
      values: |
        loki:
          auth_enabled: false
          storage:
            type: s3
            s3:
              endpoint: s3.amazonaws.com
              region: us-east-1
              bucketnames: kailash-loki-logs
          schema_config:
            configs:
              - from: 2023-01-01
                store: tsdb
                object_store: s3
                schema: v12
                index:
                  prefix: index_
                  period: 24h
        
        write:
          replicas: 3
          persistence:
            enabled: true
            size: 10Gi
        
        read:
          replicas: 3
          persistence:
            enabled: true
            size: 10Gi
        
        gateway:
          enabled: true
          replicas: 2
  
  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
---
# Promtail (Log Collector)
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: promtail
  namespace: argocd
  labels:
    app.kubernetes.io/part-of: monitoring
spec:
  project: kailash
  
  source:
    repoURL: https://grafana.github.io/helm-charts
    targetRevision: 6.15.3
    chart: promtail
    helm:
      values: |
        config:
          clients:
            - url: http://loki-gateway.monitoring.svc.cluster.local/loki/api/v1/push
        
        serviceMonitor:
          enabled: true
          labels:
            prometheus: kailash
        
        tolerations:
          - effect: NoSchedule
            operator: Exists
  
  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
---
# Tempo (Distributed Tracing)
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: tempo
  namespace: argocd
  labels:
    app.kubernetes.io/part-of: monitoring
spec:
  project: kailash
  
  source:
    repoURL: https://grafana.github.io/helm-charts
    targetRevision: 1.7.2
    chart: tempo
    helm:
      values: |
        tempo:
          storage:
            trace:
              backend: s3
              s3:
                bucket: kailash-tempo-traces
                endpoint: s3.amazonaws.com
                region: us-east-1
        
        distributor:
          replicas: 3
        
        ingester:
          replicas: 3
          persistence:
            enabled: true
            size: 10Gi
        
        querier:
          replicas: 2
        
        compactor:
          enabled: true
  
  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true