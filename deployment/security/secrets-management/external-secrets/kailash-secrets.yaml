apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: postgres-credentials
  namespace: default
  labels:
    app.kubernetes.io/name: postgres-credentials
    app.kubernetes.io/component: database
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  
  target:
    name: postgres-secret
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: postgres-secret
          app.kubernetes.io/component: database
      data:
        # Connection string template
        connection-string: "postgresql://{{ .username }}:{{ .password }}@{{ .host }}:{{ .port }}/{{ .database }}?sslmode=require"
        
        # Individual components
        username: "{{ .username }}"
        password: "{{ .password }}"
        host: "{{ .host }}"
        port: "{{ .port }}"
        database: "{{ .database }}"
  
  data:
  - secretKey: username
    remoteRef:
      key: database/postgres
      property: username
  - secretKey: password
    remoteRef:
      key: database/postgres
      property: password
  - secretKey: host
    remoteRef:
      key: database/postgres
      property: host
  - secretKey: port
    remoteRef:
      key: database/postgres
      property: port
  - secretKey: database
    remoteRef:
      key: database/postgres
      property: database

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-credentials
  namespace: default
  labels:
    app.kubernetes.io/name: redis-credentials
    app.kubernetes.io/component: cache
spec:
  refreshInterval: 30s
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  
  target:
    name: redis-secret
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: redis-secret
          app.kubernetes.io/component: cache
      data:
        # Redis connection string
        connection-string: "redis://{{ .username }}:{{ .password }}@{{ .host }}:{{ .port }}"
        
        # Individual components
        host: "{{ .host }}"
        port: "{{ .port }}"
        username: "{{ .username }}"
        password: "{{ .password }}"
  
  data:
  - secretKey: host
    remoteRef:
      key: cache/redis
      property: host
  - secretKey: port
    remoteRef:
      key: cache/redis
      property: port
  - secretKey: username
    remoteRef:
      key: cache/redis
      property: username
  - secretKey: password
    remoteRef:
      key: cache/redis
      property: password

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: application-secrets
  namespace: default
  labels:
    app.kubernetes.io/name: application-secrets
    app.kubernetes.io/component: application
spec:
  refreshInterval: 60s
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  
  target:
    name: kailash-app-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: kailash-app-secrets
          app.kubernetes.io/component: application
      data:
        # Application configuration
        secret-key: "{{ .secret_key }}"
        encryption-key: "{{ .encryption_key }}"
        nexus-api-key: "{{ .nexus_api_key }}"
        
        # External API keys
        openai-api-key: "{{ .openai_api_key }}"
        anthropic-api-key: "{{ .anthropic_api_key }}"
        
        # OAuth configuration
        oauth-client-id: "{{ .oauth_client_id }}"
        oauth-client-secret: "{{ .oauth_client_secret }}"
        
        # JWT configuration
        jwt-secret: "{{ .jwt_secret }}"
        jwt-issuer: "{{ .jwt_issuer }}"
  
  data:
  # Core application secrets
  - secretKey: secret_key
    remoteRef:
      key: application/core
      property: secret_key
  - secretKey: encryption_key
    remoteRef:
      key: application/core
      property: encryption_key
  - secretKey: nexus_api_key
    remoteRef:
      key: application/core
      property: nexus_api_key
  
  # AI service API keys
  - secretKey: openai_api_key
    remoteRef:
      key: application/ai-services
      property: openai_api_key
  - secretKey: anthropic_api_key
    remoteRef:
      key: application/ai-services
      property: anthropic_api_key
  
  # OAuth configuration
  - secretKey: oauth_client_id
    remoteRef:
      key: application/oauth
      property: client_id
  - secretKey: oauth_client_secret
    remoteRef:
      key: application/oauth
      property: client_secret
  
  # JWT configuration
  - secretKey: jwt_secret
    remoteRef:
      key: application/jwt
      property: secret
  - secretKey: jwt_issuer
    remoteRef:
      key: application/jwt
      property: issuer

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: monitoring-secrets
  namespace: monitoring
  labels:
    app.kubernetes.io/name: monitoring-secrets
    app.kubernetes.io/component: monitoring
spec:
  refreshInterval: 120s
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  
  target:
    name: monitoring-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: monitoring-credentials
          app.kubernetes.io/component: monitoring
      data:
        # Grafana admin credentials
        grafana-admin-user: "{{ .grafana_admin_user }}"
        grafana-admin-password: "{{ .grafana_admin_password }}"
        
        # Prometheus remote write
        prometheus-remote-write-username: "{{ .prometheus_remote_write_username }}"
        prometheus-remote-write-password: "{{ .prometheus_remote_write_password }}"
        
        # Alertmanager configuration
        alertmanager-slack-webhook: "{{ .alertmanager_slack_webhook }}"
        alertmanager-pagerduty-key: "{{ .alertmanager_pagerduty_key }}"
  
  data:
  - secretKey: grafana_admin_user
    remoteRef:
      key: monitoring/grafana
      property: admin_user
  - secretKey: grafana_admin_password
    remoteRef:
      key: monitoring/grafana
      property: admin_password
  - secretKey: prometheus_remote_write_username
    remoteRef:
      key: monitoring/prometheus
      property: remote_write_username
  - secretKey: prometheus_remote_write_password
    remoteRef:
      key: monitoring/prometheus
      property: remote_write_password
  - secretKey: alertmanager_slack_webhook
    remoteRef:
      key: monitoring/alertmanager
      property: slack_webhook
  - secretKey: alertmanager_pagerduty_key
    remoteRef:
      key: monitoring/alertmanager
      property: pagerduty_key

---
# Dynamic database credentials using Vault database engine
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: postgres-dynamic-credentials
  namespace: default
  labels:
    app.kubernetes.io/name: postgres-dynamic-credentials
    app.kubernetes.io/component: database
    vault.hashicorp.com/dynamic: "true"
spec:
  refreshInterval: 300s  # 5 minutes for dynamic credentials
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  
  target:
    name: postgres-dynamic-secret
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: postgres-dynamic-secret
          app.kubernetes.io/component: database
          vault.hashicorp.com/dynamic: "true"
      data:
        username: "{{ .username }}"
        password: "{{ .password }}"
        lease_id: "{{ .lease_id }}"
        lease_duration: "{{ .lease_duration }}"
  
  data:
  - secretKey: username
    remoteRef:
      key: database/creds/kailash-app
      property: username
  - secretKey: password
    remoteRef:
      key: database/creds/kailash-app
      property: password

---
# TLS certificates from Vault PKI
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: application-tls
  namespace: default
  labels:
    app.kubernetes.io/name: application-tls
    app.kubernetes.io/component: tls
spec:
  refreshInterval: 86400s  # 24 hours
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  
  target:
    name: kailash-tls-secret
    creationPolicy: Owner
    template:
      type: kubernetes.io/tls
      metadata:
        labels:
          app.kubernetes.io/name: kailash-tls-secret
          app.kubernetes.io/component: tls
      data:
        tls.crt: "{{ .certificate }}"
        tls.key: "{{ .private_key }}"
        ca.crt: "{{ .ca_certificate }}"
  
  data:
  - secretKey: certificate
    remoteRef:
      key: pki/issue/kailash-app
      property: certificate
  - secretKey: private_key
    remoteRef:
      key: pki/issue/kailash-app
      property: private_key
  - secretKey: ca_certificate
    remoteRef:
      key: pki/issue/kailash-app
      property: issuing_ca