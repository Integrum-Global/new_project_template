apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: vault-backend
  labels:
    app.kubernetes.io/name: vault-secret-store
    app.kubernetes.io/component: secrets-management
spec:
  provider:
    vault:
      server: "https://vault.vault-system.svc.cluster.local:8200"
      path: "kv"
      version: "v2"
      
      # CA bundle for TLS verification
      caBundle: |
        -----BEGIN CERTIFICATE-----
        # Vault CA certificate will be injected here
        # or use caProvider below for automatic CA discovery
        -----END CERTIFICATE-----
      
      # Alternative: Use CA provider for automatic CA discovery
      # caProvider:
      #   type: "Secret"
      #   name: "vault-ca"
      #   namespace: "vault-system"
      #   key: "ca.crt"
      
      auth:
        # Kubernetes authentication method
        kubernetes:
          mountPath: "kubernetes"
          role: "external-secrets"
          serviceAccountRef:
            name: "external-secrets-vault"
            namespace: "external-secrets-system"

---
# Service Account for Vault authentication
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-vault
  namespace: external-secrets-system
  labels:
    app.kubernetes.io/name: external-secrets-vault
    app.kubernetes.io/component: secrets-management

---
# Alternative: AWS Secrets Manager ClusterSecretStore
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: aws-secrets-manager
  labels:
    app.kubernetes.io/name: aws-secrets-manager
    app.kubernetes.io/component: secrets-management
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      
      # Authentication via IRSA (IAM Roles for Service Accounts)
      auth:
        jwt:
          serviceAccountRef:
            name: "external-secrets-aws"
            namespace: "external-secrets-system"

---
# Service Account for AWS authentication (with IRSA annotation)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-aws
  namespace: external-secrets-system
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/ExternalSecretsRole"
  labels:
    app.kubernetes.io/name: external-secrets-aws
    app.kubernetes.io/component: secrets-management

---
# Azure Key Vault ClusterSecretStore (example)
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: azure-keyvault
  labels:
    app.kubernetes.io/name: azure-keyvault
    app.kubernetes.io/component: secrets-management
spec:
  provider:
    azurekv:
      vaultUrl: "https://your-keyvault.vault.azure.net/"
      
      # Authentication via service principal
      authSecretRef:
        clientId:
          name: "azure-secret-sp"
          key: "ClientId"
          namespace: "external-secrets-system"
        clientSecret:
          name: "azure-secret-sp"
          key: "ClientSecret"
          namespace: "external-secrets-system"
      
      # Tenant ID
      tenantId: "your-tenant-id"

---
# Google Secret Manager ClusterSecretStore (example)
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: google-secret-manager
  labels:
    app.kubernetes.io/name: google-secret-manager
    app.kubernetes.io/component: secrets-management
spec:
  provider:
    gcpsm:
      projectId: "your-gcp-project"
      
      # Authentication via workload identity
      auth:
        workloadIdentity:
          clusterLocation: us-central1
          clusterName: your-cluster
          serviceAccountRef:
            name: "external-secrets-gcp"
            namespace: "external-secrets-system"

---
# Environment-specific SecretStore (production)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-production
  namespace: kailash-system
  labels:
    app.kubernetes.io/name: vault-production
    app.kubernetes.io/component: secrets-management
    environment: production
spec:
  provider:
    vault:
      server: "https://vault.vault-system.svc.cluster.local:8200"
      path: "kv"
      version: "v2"
      namespace: "production"  # Vault namespace for multi-tenancy
      
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "kailash-production"
          serviceAccountRef:
            name: "kailash-app"

---
# Environment-specific SecretStore (staging)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-staging
  namespace: kailash-staging
  labels:
    app.kubernetes.io/name: vault-staging
    app.kubernetes.io/component: secrets-management
    environment: staging
spec:
  provider:
    vault:
      server: "https://vault.vault-system.svc.cluster.local:8200"
      path: "kv"
      version: "v2"
      namespace: "staging"
      
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "kailash-staging"
          serviceAccountRef:
            name: "kailash-app"

---
# Environment-specific SecretStore (development)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-development
  namespace: kailash-dev
  labels:
    app.kubernetes.io/name: vault-development
    app.kubernetes.io/component: secrets-management
    environment: development
spec:
  provider:
    vault:
      server: "https://vault.vault-system.svc.cluster.local:8200"
      path: "kv"
      version: "v2"
      namespace: "development"
      
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "kailash-development"
          serviceAccountRef:
            name: "kailash-app"