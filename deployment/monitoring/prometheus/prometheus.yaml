# Prometheus Server Configuration
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: kailash-prometheus
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: monitoring-stack
spec:
  replicas: 2  # High availability
  retention: 15d
  retentionSize: 45GB
  
  # Service account with RBAC permissions
  serviceAccountName: prometheus
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    fsGroup: 65534
  
  # Resource requirements
  resources:
    requests:
      cpu: 500m
      memory: 2Gi
    limits:
      cpu: 2000m
      memory: 8Gi
  
  # Persistent storage
  storage:
    volumeClaimTemplate:
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 50Gi
        storageClassName: fast
  
  # Service monitor selector
  serviceMonitorSelector:
    matchLabels:
      prometheus: kailash
  
  # Probe selector
  probeSelector:
    matchLabels:
      prometheus: kailash
  
  # Rule selector
  ruleSelector:
    matchLabels:
      prometheus: kailash
  
  # Pod monitor selector
  podMonitorSelector:
    matchLabels:
      prometheus: kailash
  
  # AlertManager configuration
  alerting:
    alertmanagers:
      - namespace: monitoring
        name: alertmanager-operated
        port: web
        pathPrefix: /
  
  # Additional scrape configs
  additionalScrapeConfigs:
    name: additional-scrape-configs
    key: prometheus-additional.yaml
  
  # External labels
  externalLabels:
    cluster: kailash
    environment: production
    region: us-central1
  
  # Query configuration
  queryLogFile: /prometheus/query.log
  
  # Web configuration
  web:
    pageTitle: "Kailash Prometheus"
  
  # Enable admin API for debugging (disable in production)
  enableAdminAPI: false
  
  # WAL compression
  walCompression: true
  
  # Prometheus version
  version: v2.48.0
  
  # Pod anti-affinity for HA
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - prometheus
          topologyKey: kubernetes.io/hostname
  
  # Tolerations for dedicated nodes
  tolerations:
    - key: monitoring
      operator: Equal
      value: "true"
      effect: NoSchedule
  
  # Node selector
  nodeSelector:
    workload: monitoring
---
# Prometheus Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring
---
# ClusterRole for Prometheus
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources:
      - configmaps
    verbs: ["get"]
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics", "/metrics/cadvisor"]
    verbs: ["get"]
---
# ClusterRoleBinding for Prometheus
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: monitoring
---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: 9090
      name: web
  selector:
    app.kubernetes.io/name: prometheus
    prometheus: kailash-prometheus
---
# Additional scrape configs
apiVersion: v1
kind: Secret
metadata:
  name: additional-scrape-configs
  namespace: monitoring
stringData:
  prometheus-additional.yaml: |
    # Scrape config for API servers
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
        - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https
    
    # Scrape config for node metrics
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
        - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
    
    # Scrape config for cAdvisor
    - job_name: 'kubernetes-cadvisor'
      kubernetes_sd_configs:
        - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
      metrics_path: /metrics/cadvisor