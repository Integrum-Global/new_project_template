# Elasticsearch Index Lifecycle Management policies
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-ilm-policies
  namespace: logging
  labels:
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: ilm
data:
  # Main logs policy
  kailash-logs-policy.json: |
    {
      "policy": {
        "phases": {
          "hot": {
            "min_age": "0ms",
            "actions": {
              "rollover": {
                "max_size": "10gb",
                "max_age": "1d",
                "max_docs": 10000000
              },
              "set_priority": {
                "priority": 100
              }
            }
          },
          "warm": {
            "min_age": "2d",
            "actions": {
              "set_priority": {
                "priority": 50
              },
              "allocate": {
                "number_of_replicas": 0
              },
              "shrink": {
                "number_of_shards": 1
              },
              "forcemerge": {
                "max_num_segments": 1
              }
            }
          },
          "cold": {
            "min_age": "7d",
            "actions": {
              "set_priority": {
                "priority": 0
              },
              "allocate": {
                "number_of_replicas": 0
              }
            }
          },
          "delete": {
            "min_age": "30d",
            "actions": {
              "delete": {}
            }
          }
        }
      }
    }
  
  # Security events policy (longer retention)
  security-events-policy.json: |
    {
      "policy": {
        "phases": {
          "hot": {
            "min_age": "0ms",
            "actions": {
              "rollover": {
                "max_size": "5gb",
                "max_age": "1d",
                "max_docs": 5000000
              },
              "set_priority": {
                "priority": 200
              }
            }
          },
          "warm": {
            "min_age": "3d",
            "actions": {
              "set_priority": {
                "priority": 100
              },
              "allocate": {
                "number_of_replicas": 1
              },
              "shrink": {
                "number_of_shards": 1
              },
              "forcemerge": {
                "max_num_segments": 1
              }
            }
          },
          "cold": {
            "min_age": "30d",
            "actions": {
              "set_priority": {
                "priority": 0
              }
            }
          },
          "delete": {
            "min_age": "365d",
            "actions": {
              "delete": {}
            }
          }
        }
      }
    }
  
  # Audit logs policy (extended retention for compliance)
  audit-logs-policy.json: |
    {
      "policy": {
        "phases": {
          "hot": {
            "min_age": "0ms",
            "actions": {
              "rollover": {
                "max_size": "5gb",
                "max_age": "1d",
                "max_docs": 5000000
              },
              "set_priority": {
                "priority": 300
              }
            }
          },
          "warm": {
            "min_age": "7d",
            "actions": {
              "set_priority": {
                "priority": 150
              },
              "allocate": {
                "number_of_replicas": 1
              },
              "shrink": {
                "number_of_shards": 1
              },
              "forcemerge": {
                "max_num_segments": 1
              }
            }
          },
          "cold": {
            "min_age": "90d",
            "actions": {
              "set_priority": {
                "priority": 0
              }
            }
          },
          "frozen": {
            "min_age": "365d",
            "actions": {
              "searchable_snapshot": {
                "snapshot_repository": "backup-repository"
              }
            }
          },
          "delete": {
            "min_age": "2555d",
            "actions": {
              "delete": {}
            }
          }
        }
      }
    }
  
  # Metrics policy (shorter retention, optimized for time series)
  metrics-policy.json: |
    {
      "policy": {
        "phases": {
          "hot": {
            "min_age": "0ms",
            "actions": {
              "rollover": {
                "max_size": "20gb",
                "max_age": "1d",
                "max_docs": 50000000
              },
              "set_priority": {
                "priority": 100
              }
            }
          },
          "warm": {
            "min_age": "1d",
            "actions": {
              "set_priority": {
                "priority": 50
              },
              "allocate": {
                "number_of_replicas": 0
              },
              "shrink": {
                "number_of_shards": 1
              },
              "forcemerge": {
                "max_num_segments": 1
              }
            }
          },
          "cold": {
            "min_age": "3d",
            "actions": {
              "set_priority": {
                "priority": 0
              }
            }
          },
          "delete": {
            "min_age": "15d",
            "actions": {
              "delete": {}
            }
          }
        }
      }
    }

---
# Job to apply ILM policies
apiVersion: batch/v1
kind: Job
metadata:
  name: elasticsearch-ilm-setup
  namespace: logging
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "10"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        app: elasticsearch-ilm-setup
    spec:
      restartPolicy: OnFailure
      serviceAccountName: elasticsearch-ilm-setup
      
      containers:
        - name: ilm-setup
          image: curlimages/curl:8.5.0
          command:
            - /bin/sh
            - -c
            - |
              set -e
              
              # Wait for Elasticsearch to be ready
              until curl -k -s -u "elastic:${ELASTICSEARCH_PASSWORD}" \
                "https://kailash-logs-es-http:9200/_cluster/health?wait_for_status=yellow&timeout=60s" | \
                grep -q '"status":"yellow\|green"'; do
                echo "Waiting for Elasticsearch to be ready..."
                sleep 10
              done
              
              echo "Elasticsearch is ready. Setting up ILM policies..."
              
              # Apply main logs policy
              curl -k -X PUT -H "Content-Type: application/json" \
                -u "elastic:${ELASTICSEARCH_PASSWORD}" \
                "https://kailash-logs-es-http:9200/_ilm/policy/kailash-logs-policy" \
                -d @/policies/kailash-logs-policy.json
              
              # Apply security events policy
              curl -k -X PUT -H "Content-Type: application/json" \
                -u "elastic:${ELASTICSEARCH_PASSWORD}" \
                "https://kailash-logs-es-http:9200/_ilm/policy/security-events-policy" \
                -d @/policies/security-events-policy.json
              
              # Apply audit logs policy
              curl -k -X PUT -H "Content-Type: application/json" \
                -u "elastic:${ELASTICSEARCH_PASSWORD}" \
                "https://kailash-logs-es-http:9200/_ilm/policy/audit-logs-policy" \
                -d @/policies/audit-logs-policy.json
              
              # Apply metrics policy
              curl -k -X PUT -H "Content-Type: application/json" \
                -u "elastic:${ELASTICSEARCH_PASSWORD}" \
                "https://kailash-logs-es-http:9200/_ilm/policy/metrics-policy" \
                -d @/policies/metrics-policy.json
              
              # Create index templates
              echo "Creating index templates..."
              
              # Main logs template
              curl -k -X PUT -H "Content-Type: application/json" \
                -u "elastic:${ELASTICSEARCH_PASSWORD}" \
                "https://kailash-logs-es-http:9200/_index_template/kailash-logs" \
                -d '{
                  "index_patterns": ["kailash-logs-*"],
                  "template": {
                    "settings": {
                      "number_of_shards": 2,
                      "number_of_replicas": 1,
                      "index.lifecycle.name": "kailash-logs-policy",
                      "index.lifecycle.rollover_alias": "kailash-logs",
                      "index.codec": "best_compression",
                      "index.mapping.total_fields.limit": 2000,
                      "index.refresh_interval": "30s"
                    },
                    "mappings": {
                      "properties": {
                        "@timestamp": { "type": "date" },
                        "message": { "type": "text", "analyzer": "standard" },
                        "level": { "type": "keyword" },
                        "k8s": {
                          "properties": {
                            "namespace": { "type": "keyword" },
                            "pod": { "type": "keyword" },
                            "container": { "type": "keyword" },
                            "node": { "type": "keyword" }
                          }
                        },
                        "host": {
                          "properties": {
                            "name": { "type": "keyword" },
                            "ip": { "type": "ip" }
                          }
                        }
                      }
                    }
                  },
                  "priority": 100,
                  "composed_of": []
                }'
              
              # Security events template
              curl -k -X PUT -H "Content-Type: application/json" \
                -u "elastic:${ELASTICSEARCH_PASSWORD}" \
                "https://kailash-logs-es-http:9200/_index_template/security-events" \
                -d '{
                  "index_patterns": ["security-events-*"],
                  "template": {
                    "settings": {
                      "number_of_shards": 1,
                      "number_of_replicas": 1,
                      "index.lifecycle.name": "security-events-policy",
                      "index.lifecycle.rollover_alias": "security-events",
                      "index.codec": "best_compression"
                    },
                    "mappings": {
                      "properties": {
                        "@timestamp": { "type": "date" },
                        "event_type": { "type": "keyword" },
                        "severity": { "type": "keyword" },
                        "source_ip": { "type": "ip" },
                        "user": { "type": "keyword" },
                        "action": { "type": "keyword" }
                      }
                    }
                  },
                  "priority": 200
                }'
              
              # Audit logs template
              curl -k -X PUT -H "Content-Type: application/json" \
                -u "elastic:${ELASTICSEARCH_PASSWORD}" \
                "https://kailash-logs-es-http:9200/_index_template/audit-logs" \
                -d '{
                  "index_patterns": ["audit-logs-*"],
                  "template": {
                    "settings": {
                      "number_of_shards": 1,
                      "number_of_replicas": 1,
                      "index.lifecycle.name": "audit-logs-policy",
                      "index.lifecycle.rollover_alias": "audit-logs",
                      "index.codec": "best_compression"
                    },
                    "mappings": {
                      "properties": {
                        "@timestamp": { "type": "date" },
                        "verb": { "type": "keyword" },
                        "objectRef": {
                          "properties": {
                            "resource": { "type": "keyword" },
                            "namespace": { "type": "keyword" },
                            "name": { "type": "keyword" }
                          }
                        },
                        "user": {
                          "properties": {
                            "username": { "type": "keyword" },
                            "groups": { "type": "keyword" }
                          }
                        },
                        "sourceIPs": { "type": "ip" }
                      }
                    }
                  },
                  "priority": 300
                }'
              
              echo "ILM policies and templates created successfully!"
          
          env:
            - name: ELASTICSEARCH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kailash-logs-es-elastic-user
                  key: elastic
          
          volumeMounts:
            - name: policies
              mountPath: /policies
              readOnly: true
          
          resources:
            requests:
              memory: 64Mi
              cpu: 50m
            limits:
              memory: 128Mi
              cpu: 100m
      
      volumes:
        - name: policies
          configMap:
            name: elasticsearch-ilm-policies

---
# ServiceAccount for ILM setup job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elasticsearch-ilm-setup
  namespace: logging

---
# Role for ILM setup (minimal permissions)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: elasticsearch-ilm-setup
  namespace: logging
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]

---
# RoleBinding for ILM setup
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: elasticsearch-ilm-setup
  namespace: logging
subjects:
  - kind: ServiceAccount
    name: elasticsearch-ilm-setup
    namespace: logging
roleRef:
  kind: Role
  name: elasticsearch-ilm-setup
  apiGroup: rbac.authorization.k8s.io