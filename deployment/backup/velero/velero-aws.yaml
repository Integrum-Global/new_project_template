# Velero backup and disaster recovery for AWS
apiVersion: v1
kind: Namespace
metadata:
  name: velero
  labels:
    name: velero
    app.kubernetes.io/name: velero
    app.kubernetes.io/component: backup
    pod-security.kubernetes.io/enforce: baseline
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted

---
# Secret for AWS credentials
apiVersion: v1
kind: Secret
metadata:
  name: cloud-credentials
  namespace: velero
type: Opaque
stringData:
  cloud: |
    [default]
    aws_access_key_id=YOUR_ACCESS_KEY_ID
    aws_secret_access_key=YOUR_SECRET_ACCESS_KEY

---
# BackupStorageLocation for AWS S3
apiVersion: velero.io/v1
kind: BackupStorageLocation
metadata:
  name: aws-s3
  namespace: velero
  labels:
    component: velero
spec:
  provider: aws
  objectStorage:
    bucket: kailash-velero-backups
    prefix: backups
  config:
    region: us-east-1
    s3ForcePathStyle: "false"
    s3Url: https://s3.amazonaws.com
    checksumAlgorithm: ""
    enableSharedConfig: "true"
    # Server-side encryption
    serverSideEncryption: AES256
    # KMS encryption (alternative to AES256)
    # kmsKeyId: "arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012"
    # serverSideEncryption: aws:kms

---
# VolumeSnapshotLocation for AWS EBS
apiVersion: velero.io/v1
kind: VolumeSnapshotLocation
metadata:
  name: aws-ebs
  namespace: velero
  labels:
    component: velero
spec:
  provider: aws
  config:
    region: us-east-1
    # Enable cross-region snapshot copying
    enableSharedConfig: "true"

---
# Velero deployment with AWS configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: velero
  namespace: velero
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/component: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: velero
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: velero
        app.kubernetes.io/component: server
        prometheus.io/scrape: "true"
        prometheus.io/port: "8085"
      annotations:
        prometheus.io/path: /metrics
    spec:
      serviceAccountName: velero
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      
      containers:
        - name: velero
          image: velero/velero:v1.12.2
          imagePullPolicy: IfNotPresent
          
          command:
            - /velero
          args:
            - server
            - --log-level=info
            - --log-format=json
            - --metrics-address=0.0.0.0:8085
            - --default-backup-storage-location=aws-s3
            - --default-volume-snapshot-locations=aws-ebs
            - --backup-sync-period=1h
            - --restore-resource-priorities=namespaces,storageclasses,customresourcedefinitions,persistentvolumes,persistentvolumeclaims,secrets,configmaps,serviceaccounts,limitranges,pods
            - --default-backup-ttl=168h0m0s
            - --default-repo-maintain-frequency=168h0m0s
            - --garbage-collection-frequency=1h
            - --plugin-dir=/plugins
            - --features=EnableCSI
          
          env:
            - name: VELERO_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LD_LIBRARY_PATH
              value: /plugins
            - name: VELERO_SCRATCH_DIR
              value: /scratch
            - name: AWS_SHARED_CREDENTIALS_FILE
              value: /credentials/cloud
            - name: AWS_CONFIG_FILE
              value: /credentials/config
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /credentials/cloud
            - name: AZURE_CREDENTIALS_FILE
              value: /credentials/cloud
            - name: ALIBABA_CLOUD_CREDENTIALS_FILE
              value: /credentials/cloud
          
          volumeMounts:
            - name: cloud-credentials
              mountPath: /credentials
            - name: plugins
              mountPath: /plugins
            - name: scratch
              mountPath: /scratch
          
          ports:
            - name: http-monitoring
              containerPort: 8085
              protocol: TCP
          
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: http-monitoring
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: http-monitoring
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          
          resources:
            requests:
              memory: 128Mi
              cpu: 100m
            limits:
              memory: 512Mi
              cpu: 500m
          
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
      
      # Init container for AWS plugin
      initContainers:
        - name: velero-plugin-for-aws
          image: velero/velero-plugin-for-aws:v1.8.2
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath: /target
              name: plugins
          
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
      
      volumes:
        - name: cloud-credentials
          secret:
            secretName: cloud-credentials
        - name: plugins
          emptyDir: {}
        - name: scratch
          emptyDir: {}
      
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
# ServiceAccount for Velero
apiVersion: v1
kind: ServiceAccount
metadata:
  name: velero
  namespace: velero
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/component: server
  annotations:
    # AWS IAM role for service accounts (IRSA)
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/VeleroRole

---
# ClusterRole for Velero
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: velero
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/component: server
rules:
  - apiGroups: [""]
    resources: ["*"]
    verbs: ["*"]
  - apiGroups: ["apps"]
    resources: ["*"]
    verbs: ["*"]
  - apiGroups: ["extensions"]
    resources: ["*"]
    verbs: ["*"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["*"]
    verbs: ["*"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["*"]
    verbs: ["*"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["*"]
    verbs: ["*"]
  - apiGroups: ["velero.io"]
    resources: ["*"]
    verbs: ["*"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots", "volumesnapshotcontents", "volumesnapshotclasses"]
    verbs: ["*"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["*"]

---
# ClusterRoleBinding for Velero
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: velero
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/component: server
subjects:
  - kind: ServiceAccount
    name: velero
    namespace: velero
roleRef:
  kind: ClusterRole
  name: velero
  apiGroup: rbac.authorization.k8s.io

---
# Service for Velero metrics
apiVersion: v1
kind: Service
metadata:
  name: velero-metrics
  namespace: velero
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/component: server
spec:
  ports:
    - name: http-monitoring
      port: 8085
      targetPort: http-monitoring
      protocol: TCP
  selector:
    app.kubernetes.io/name: velero
    app.kubernetes.io/component: server
  type: ClusterIP

---
# ServiceMonitor for Prometheus integration
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: velero-metrics
  namespace: velero
  labels:
    app.kubernetes.io/name: velero
    prometheus: kailash
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: velero
      app.kubernetes.io/component: server
  endpoints:
    - port: http-monitoring
      interval: 30s
      path: /metrics

---
# Network policy for Velero
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: velero-network-policy
  namespace: velero
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: velero
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow monitoring from Prometheus
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 8085
  egress:
    # Allow access to AWS S3 and EBS APIs
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
    
    # Allow Kubernetes API access
    - to: []
      ports:
        - protocol: TCP
          port: 6443
    
    # Allow DNS
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53