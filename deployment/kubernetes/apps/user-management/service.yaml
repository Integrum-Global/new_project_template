apiVersion: v1
kind: Service
metadata:
  name: user-management-service
  namespace: kailash-user-management
  labels:
    app: user-management
    component: backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: api
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: websocket
    port: 8001
    targetPort: 8001
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: user-management
    component: backend

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgresql-service
  namespace: kailash-user-management
  labels:
    app: postgresql
    component: database
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: postgresql
    component: database

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: kailash-user-management
  labels:
    app: redis
    component: cache
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
  selector:
    app: redis
    component: cache

---
# External LoadBalancer Service (for production)
apiVersion: v1
kind: Service
metadata:
  name: user-management-external
  namespace: kailash-user-management
  labels:
    app: user-management
    component: external
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:region:account:certificate/cert-id"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
spec:
  type: LoadBalancer
  ports:
  - name: https
    port: 443
    targetPort: 80
    protocol: TCP
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  selector:
    app: user-management
    component: backend

---
# Headless Service for StatefulSet (if needed for clustering)
apiVersion: v1
kind: Service
metadata:
  name: user-management-headless
  namespace: kailash-user-management
  labels:
    app: user-management
    component: headless
spec:
  clusterIP: None
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: api
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: websocket
    port: 8001
    targetPort: 8001
    protocol: TCP
  selector:
    app: user-management
    component: backend

---
# Monitoring Service for Prometheus
apiVersion: v1
kind: Service
metadata:
  name: user-management-metrics
  namespace: kailash-user-management
  labels:
    app: user-management
    component: metrics
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: user-management
    component: backend