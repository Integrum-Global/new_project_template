apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: user-management-ingress
  namespace: kailash-user-management
  labels:
    app: user-management
    component: ingress
  annotations:
    # NGINX Ingress Controller
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # CORS Configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://kailash.company.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
    # Rate Limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # WebSocket Support
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$binary_remote_addr"
    
    # Security Headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';";
    
    # Certificate Manager (cert-manager)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: "http01"
    
    # Body Size
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    
    # Custom timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: "60"
spec:
  tls:
  - hosts:
    - user-management.kailash.company.com
    - api.user-management.kailash.company.com
    secretName: user-management-tls-secret
  rules:
  - host: user-management.kailash.company.com
    http:
      paths:
      # Main application routes
      - path: /
        pathType: Prefix
        backend:
          service:
            name: user-management-service
            port:
              number: 80
      
      # API routes
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: user-management-service
            port:
              number: 8000
      
      # WebSocket routes
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: user-management-service
            port:
              number: 8001
      
      # Health check (no auth required)
      - path: /health
        pathType: Exact
        backend:
          service:
            name: user-management-service
            port:
              number: 8000
  
  # API subdomain for direct API access
  - host: api.user-management.kailash.company.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: user-management-service
            port:
              number: 8000

---
# Ingress for staging environment
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: user-management-staging-ingress
  namespace: kailash-user-management-staging
  labels:
    app: user-management
    component: ingress
    environment: staging
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    
    # Basic Auth for staging
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: staging-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: "Staging Environment - Authentication Required"
    
    # Rate limiting for staging
    nginx.ingress.kubernetes.io/rate-limit: "50"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - staging.user-management.kailash.company.com
    secretName: user-management-staging-tls
  rules:
  - host: staging.user-management.kailash.company.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: user-management-service
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: user-management-service
            port:
              number: 8000
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: user-management-service
            port:
              number: 8001

---
# Ingress for development environment (internal only)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: user-management-dev-ingress
  namespace: kailash-user-management-dev
  labels:
    app: user-management
    component: ingress
    environment: development
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    
    # Allow only internal IPs for development
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    
    # No SSL requirement for dev
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    
    # Relaxed rate limiting for dev
    nginx.ingress.kubernetes.io/rate-limit: "200"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  rules:
  - host: dev.user-management.kailash.company.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: user-management-service
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: user-management-service
            port:
              number: 8000
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: user-management-service
            port:
              number: 8001