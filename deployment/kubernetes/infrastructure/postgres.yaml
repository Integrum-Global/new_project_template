apiVersion: v1
kind: Secret
metadata:
  name: database-secret
  namespace: kailash-platform
type: Opaque
data:
  # Base64 encoded values
  username: a2FpbGFzaA==  # kailash
  password: a2FpbGFzaF9zZWN1cmU=  # kailash_secure
  url: cG9zdGdyZXNxbDovL2thaWxhc2g6a2FpbGFzaF9zZWN1cmVAcG9zdGdyZXM6NTQzMi9rYWlsYXNoX3BsYXRmb3Jt  # postgresql://kailash:kailash_secure@postgres:5432/kailash_platform

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: kailash-platform
data:
  POSTGRES_DB: kailash_platform
  POSTGRES_USER: kailash
  POSTGRES_MULTIPLE_DATABASES: "user_management,analytics,document_processor"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: kailash-platform
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: kailash-platform
  labels:
    app: postgres
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: password
        - name: POSTGRES_MULTIPLE_DATABASES
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_MULTIPLE_DATABASES
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - kailash
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - kailash
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-scripts
        configMap:
          name: postgres-init-scripts

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: kailash-platform
  labels:
    app: postgres
    component: database
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: kailash-platform
data:
  init-multiple-databases.sh: |
    #!/bin/bash
    set -e
    set -u

    function create_user_and_database() {
        local database=$1
        echo "  Creating user and database '$database'"
        psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
            CREATE DATABASE $database;
            GRANT ALL PRIVILEGES ON DATABASE $database TO $POSTGRES_USER;
    EOSQL
    }

    if [ -n "$POSTGRES_MULTIPLE_DATABASES" ]; then
        echo "Multiple database creation requested: $POSTGRES_MULTIPLE_DATABASES"
        for db in $(echo $POSTGRES_MULTIPLE_DATABASES | tr ',' ' '); do
            create_user_and_database $db
        done
        echo "Multiple databases created"
    fi