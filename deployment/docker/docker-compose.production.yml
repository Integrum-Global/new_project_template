# Production Docker Compose for Kailash SDK Template
# Enterprise-grade deployment configuration

services:
  # Main Application
  app:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
      args:
        BUILD_VERSION: ${BUILD_VERSION:-latest}
        BUILD_DATE: ${BUILD_DATE}
        BUILD_REVISION: ${BUILD_REVISION}
    container_name: ${PROJECT_NAME:-template}-app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    environment:
      # Database configuration
      - DATABASE_URL=postgresql://app_user:${POSTGRES_PASSWORD}@postgres:5432/${PROJECT_NAME:-template}_db
      - REDIS_URL=redis://redis:6379
      - OLLAMA_BASE_URL=http://ollama:11434
      
      # Application configuration
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=info
      - WORKERS=4
      - TIMEOUT=300
      
      # Security
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      
      # Monitoring
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      - HEALTH_CHECK_INTERVAL=30
      
      # DataFlow configuration
      - DATAFLOW_DATABASE_URL=postgresql://app_user:${POSTGRES_PASSWORD}@postgres:5432/${PROJECT_NAME:-template}_db
      - DATAFLOW_REDIS_URL=redis://redis:6379
      - DATAFLOW_CACHE_TTL=3600
      
      # Nexus configuration
      - NEXUS_ENABLE_API=true
      - NEXUS_ENABLE_CLI=true
      - NEXUS_ENABLE_MCP=true
      - NEXUS_API_KEY=${NEXUS_API_KEY}
    ports:
      - "8000:8000"
      - "9090:9090"  # Metrics
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
      - app_outputs:/app/outputs
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/workflows/get_status/execute"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.app.tls=true"
      - "traefik.http.routers.app.tls.certresolver=letsencrypt"

  # PostgreSQL Database
  postgres:
    image: pgvector/pgvector:pg15
    container_name: ${PROJECT_NAME:-template}-postgres
    environment:
      POSTGRES_DB: ${PROJECT_NAME:-template}_db
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d ${PROJECT_NAME:-template}_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=512MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ${PROJECT_NAME:-template}-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec

  # Ollama AI Service
  ollama:
    image: ollama/ollama:latest
    container_name: ${PROJECT_NAME:-template}-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    environment:
      - OLLAMA_MODELS=/root/.ollama/models
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_NUM_PARALLEL=2
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:11434/api/tags || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Reverse Proxy (Traefik)
  traefik:
    image: traefik:v3.0
    container_name: ${PROJECT_NAME:-template}-traefik
    command:
      - "--api.dashboard=true"
      - "--api.debug=false"
      - "--log.level=INFO"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - app-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_BASIC_AUTH}"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ${PROJECT_NAME:-template}-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - app

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: ${PROJECT_NAME:-template}-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  ollama_models:
  app_logs:
  app_data:
  app_outputs:
  traefik_letsencrypt:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16